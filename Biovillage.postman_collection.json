{
	"info": {
		"_postman_id": "71c51592-1f5f-4589-92a1-2824931f4f09",
		"name": "Biovillage",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "Admin",
			"item": [
				{
					"name": "Admin store",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{adminToken}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "name",
									"value": "Петя",
									"type": "text"
								},
								{
									"key": "phone",
									"value": "+79998887766",
									"type": "text"
								},
								{
									"key": "password",
									"value": "secret",
									"type": "text"
								},
								{
									"key": "roles[]",
									"value": "admin",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{url}}/api/v1/admin/admins",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"v1",
								"admin",
								"admins"
							]
						},
						"description": "# Получение списка администраторов всех ролей\r\n\r\n* Авторизация\r\n  * Нужен токен админа\r\n* Параметры\r\n  * sort -  Имя поля для сортировки. Принимает 2 значения: **name** и **dt**. Что \r\n  означает сортировать по имени админа или по дате добавления.\r\n  * sortDirect - Направление сортировки. Принимает 2 значения **asc** и **desc**. Что означает сортировать в прямом или обратном порядке.\r\n* Результат\r\n  * Данные админов  \r\n* Пагинация\r\n  * Возвращается весь список админов без пагинации"
					},
					"response": [
						{
							"name": "adminList",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{url}}/api/v1/admin/list?sort=createdAt",
									"host": [
										"{{url}}"
									],
									"path": [
										"api",
										"v1",
										"admin",
										"list"
									],
									"query": [
										{
											"key": "sort",
											"value": "createdAt"
										}
									]
								}
							},
							"_postman_previewlanguage": "Text",
							"header": [],
							"cookie": [],
							"body": ""
						},
						{
							"name": "adminList",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{url}}/api/v1/admin/list?sort=createdAt",
									"host": [
										"{{url}}"
									],
									"path": [
										"api",
										"v1",
										"admin",
										"list"
									],
									"query": [
										{
											"key": "sort",
											"value": "createdAt"
										}
									]
								}
							},
							"_postman_previewlanguage": "Text",
							"header": [],
							"cookie": [],
							"body": ""
						}
					]
				},
				{
					"name": "Admin list",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{adminToken}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{url}}/api/v1/admin/admins",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"v1",
								"admin",
								"admins"
							],
							"query": [
								{
									"key": "sort",
									"value": "name",
									"description": "Поле сортировки",
									"disabled": true
								},
								{
									"key": "sortDirect",
									"value": "desc",
									"description": "Направление",
									"disabled": true
								}
							]
						},
						"description": "# Получение списка администраторов всех ролей\r\n\r\n* Авторизация\r\n  * Нужен токен админа\r\n* Параметры\r\n  * sort -  Имя поля для сортировки. Принимает 2 значения: **name** и **dt**. Что \r\n  означает сортировать по имени админа или по дате добавления.\r\n  * sortDirect - Направление сортировки. Принимает 2 значения **asc** и **desc**. Что означает сортировать в прямом или обратном порядке.\r\n* Результат\r\n  * Данные админов  \r\n* Пагинация\r\n  * Возвращается весь список админов без пагинации"
					},
					"response": [
						{
							"name": "adminList",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{url}}/api/v1/admin/list?sort=createdAt",
									"host": [
										"{{url}}"
									],
									"path": [
										"api",
										"v1",
										"admin",
										"list"
									],
									"query": [
										{
											"key": "sort",
											"value": "createdAt"
										}
									]
								}
							},
							"_postman_previewlanguage": "Text",
							"header": [],
							"cookie": [],
							"body": ""
						},
						{
							"name": "adminList",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{url}}/api/v1/admin/list?sort=createdAt",
									"host": [
										"{{url}}"
									],
									"path": [
										"api",
										"v1",
										"admin",
										"list"
									],
									"query": [
										{
											"key": "sort",
											"value": "createdAt"
										}
									]
								}
							},
							"_postman_previewlanguage": "Text",
							"header": [],
							"cookie": [],
							"body": ""
						}
					]
				},
				{
					"name": "Admin show",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{adminToken}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{url}}/api/v1/admin/admins/10",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"v1",
								"admin",
								"admins",
								"10"
							],
							"query": [
								{
									"key": "sort",
									"value": "name",
									"description": "Поле сортировки",
									"disabled": true
								},
								{
									"key": "sortDirect",
									"value": "desc",
									"description": "Направление",
									"disabled": true
								}
							]
						},
						"description": "# Получение списка администраторов всех ролей\r\n\r\n* Авторизация\r\n  * Нужен токен админа\r\n* Параметры\r\n  * sort -  Имя поля для сортировки. Принимает 2 значения: **name** и **dt**. Что \r\n  означает сортировать по имени админа или по дате добавления.\r\n  * sortDirect - Направление сортировки. Принимает 2 значения **asc** и **desc**. Что означает сортировать в прямом или обратном порядке.\r\n* Результат\r\n  * Данные админов  \r\n* Пагинация\r\n  * Возвращается весь список админов без пагинации"
					},
					"response": [
						{
							"name": "adminList",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{url}}/api/v1/admin/list?sort=createdAt",
									"host": [
										"{{url}}"
									],
									"path": [
										"api",
										"v1",
										"admin",
										"list"
									],
									"query": [
										{
											"key": "sort",
											"value": "createdAt"
										}
									]
								}
							},
							"_postman_previewlanguage": "Text",
							"header": [],
							"cookie": [],
							"body": ""
						},
						{
							"name": "adminList",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{url}}/api/v1/admin/list?sort=createdAt",
									"host": [
										"{{url}}"
									],
									"path": [
										"api",
										"v1",
										"admin",
										"list"
									],
									"query": [
										{
											"key": "sort",
											"value": "createdAt"
										}
									]
								}
							},
							"_postman_previewlanguage": "Text",
							"header": [],
							"cookie": [],
							"body": ""
						}
					]
				},
				{
					"name": "Admin update",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{adminToken}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "name",
									"value": "Петя update",
									"type": "text"
								},
								{
									"key": "phone",
									"value": "+79998887765",
									"type": "text"
								},
								{
									"key": "password",
									"value": "secretw",
									"type": "text"
								},
								{
									"key": "roles[]",
									"value": "admin",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{url}}/api/v1/admin/admins/3",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"v1",
								"admin",
								"admins",
								"3"
							]
						},
						"description": "# Получение списка администраторов всех ролей\r\n\r\n* Авторизация\r\n  * Нужен токен админа\r\n* Параметры\r\n  * sort -  Имя поля для сортировки. Принимает 2 значения: **name** и **dt**. Что \r\n  означает сортировать по имени админа или по дате добавления.\r\n  * sortDirect - Направление сортировки. Принимает 2 значения **asc** и **desc**. Что означает сортировать в прямом или обратном порядке.\r\n* Результат\r\n  * Данные админов  \r\n* Пагинация\r\n  * Возвращается весь список админов без пагинации"
					},
					"response": [
						{
							"name": "adminList",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{url}}/api/v1/admin/list?sort=createdAt",
									"host": [
										"{{url}}"
									],
									"path": [
										"api",
										"v1",
										"admin",
										"list"
									],
									"query": [
										{
											"key": "sort",
											"value": "createdAt"
										}
									]
								}
							},
							"_postman_previewlanguage": "Text",
							"header": [],
							"cookie": [],
							"body": ""
						},
						{
							"name": "adminList",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{url}}/api/v1/admin/list?sort=createdAt",
									"host": [
										"{{url}}"
									],
									"path": [
										"api",
										"v1",
										"admin",
										"list"
									],
									"query": [
										{
											"key": "sort",
											"value": "createdAt"
										}
									]
								}
							},
							"_postman_previewlanguage": "Text",
							"header": [],
							"cookie": [],
							"body": ""
						}
					]
				},
				{
					"name": "Admin delete",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{adminToken}}",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": []
						},
						"url": {
							"raw": "{{url}}/api/v1/admin/admins/5",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"v1",
								"admin",
								"admins",
								"5"
							]
						},
						"description": "# Получение списка администраторов всех ролей\r\n\r\n* Авторизация\r\n  * Нужен токен админа\r\n* Параметры\r\n  * sort -  Имя поля для сортировки. Принимает 2 значения: **name** и **dt**. Что \r\n  означает сортировать по имени админа или по дате добавления.\r\n  * sortDirect - Направление сортировки. Принимает 2 значения **asc** и **desc**. Что означает сортировать в прямом или обратном порядке.\r\n* Результат\r\n  * Данные админов  \r\n* Пагинация\r\n  * Возвращается весь список админов без пагинации"
					},
					"response": [
						{
							"name": "adminList",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{url}}/api/v1/admin/list?sort=createdAt",
									"host": [
										"{{url}}"
									],
									"path": [
										"api",
										"v1",
										"admin",
										"list"
									],
									"query": [
										{
											"key": "sort",
											"value": "createdAt"
										}
									]
								}
							},
							"_postman_previewlanguage": "Text",
							"header": [],
							"cookie": [],
							"body": ""
						},
						{
							"name": "adminList",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{url}}/api/v1/admin/list?sort=createdAt",
									"host": [
										"{{url}}"
									],
									"path": [
										"api",
										"v1",
										"admin",
										"list"
									],
									"query": [
										{
											"key": "sort",
											"value": "createdAt"
										}
									]
								}
							},
							"_postman_previewlanguage": "Text",
							"header": [],
							"cookie": [],
							"body": ""
						}
					]
				},
				{
					"name": "Admin login",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = JSON.parse(responseBody);\r",
									"postman.setEnvironmentVariable(\"adminToken\", jsonData.result.token);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [],
						"url": {
							"raw": "{{url}}/api/v1/admin/login?phone=+79112001100&password=passsuperadmin1",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"v1",
								"admin",
								"login"
							],
							"query": [
								{
									"key": "phone",
									"value": "+79112001100",
									"description": "Phone number"
								},
								{
									"key": "password",
									"value": "passsuperadmin1",
									"description": "Password"
								}
							]
						},
						"description": "# Авторизация админов\r\n  * Параметры\r\n    * phone - Номер телефона в офрмате Е164\r\n    * password - Пароль админа\r\n  * Результат\r\n    * В случае успеха - данные админа и его токен домента. Этот токен можено передавать в другие API требующие авторизации\r\n\r\n*Логины и пароли других админов находятся в общем чате, в закрепленном сообщении*"
					},
					"response": []
				}
			]
		},
		{
			"name": "Settings",
			"item": [
				{
					"name": "updateSettings",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{adminToken}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "founderPhoto",
									"type": "file",
									"src": "/C:/Users/Иван/Pictures/11313208_103548969985147_894888127_n.jpg",
									"disabled": true
								},
								{
									"key": "founderName",
									"value": "Ivan Ivanov",
									"type": "text",
									"disabled": true
								},
								{
									"key": "officeLat",
									"value": "1.23",
									"type": "text",
									"disabled": true
								},
								{
									"key": "officeLon",
									"value": "1.23",
									"type": "text",
									"disabled": true
								},
								{
									"key": "paymentCashEnabled",
									"value": "1",
									"type": "text",
									"disabled": true
								},
								{
									"key": "paymentCCardEnabled",
									"value": "1",
									"type": "text",
									"disabled": true
								},
								{
									"key": "paymentGPayEnabled",
									"value": "0",
									"type": "text",
									"disabled": true
								},
								{
									"key": "paymentAPayEnabled",
									"value": "0",
									"type": "text",
									"disabled": true
								},
								{
									"key": "paymentBonusEnabled",
									"value": "0",
									"type": "text",
									"disabled": true
								},
								{
									"key": "mapsPrimaryCity",
									"value": "город Москва",
									"type": "text",
									"disabled": true
								},
								{
									"key": "mapsZoom",
									"value": "4",
									"type": "text",
									"disabled": true
								},
								{
									"key": "lang",
									"value": "en",
									"type": "text",
									"disabled": true
								},
								{
									"key": "paymentGatewayShopId",
									"value": "781011",
									"type": "text",
									"disabled": true
								},
								{
									"key": "paymentGatewayMobileKey",
									"value": "test_NzgxMDExDgrH752GLsEQs0-7lEpK0byivFW0Lqtyzvw",
									"type": "text",
									"disabled": true
								},
								{
									"key": "paymentGatewaySecretKey",
									"value": "test_u0uny7pHS_GmksPXgeA4L54aOE9jdQk4NAZLj0T0F74",
									"type": "text",
									"disabled": true
								},
								{
									"key": "paymentGatewayReturnUrl",
									"value": "https://biovillagedev.ru",
									"type": "text",
									"disabled": true
								},
								{
									"key": "paymentGatewayPurchaseName",
									"value": "Оплата заказа",
									"type": "text",
									"disabled": true
								},
								{
									"key": "paymentGatewayPurchaseDesc",
									"value": "Вкусные продукты",
									"type": "text",
									"disabled": true
								},
								{
									"key": "paymentGateway",
									"value": "yk",
									"type": "text",
									"disabled": true
								},
								{
									"key": "paymentCardEnabled",
									"value": "1",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{url}}/api/v1/admin/settings",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"v1",
								"admin",
								"settings"
							]
						},
						"description": "# Обновление настроек\r\n\r\nОбновление настроек. Никакх проверок при обновлении настроек нет. Почти все настройки - это строки, исключение - координаты офиса и фото директора. Фото директора - это файл, который нужно загружать. Удалить фото нельзя. В качестве параметров выступают значения настроек. Список настроек перечислен в АПИ getAllSettings."
					},
					"response": []
				},
				{
					"name": "getAllSettings",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{adminToken}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": []
						},
						"url": {
							"raw": "{{url}}/api/v1/admin/settings",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"v1",
								"admin",
								"settings"
							]
						},
						"description": "# Получить все настрйоки системы\r\n* Результат\r\n    * Описание настроек см. на стр [Списка настроек](https://gitlab.globalcode.eu/bv/biovillage-back/-/wikis/%D0%A1%D0%BF%D0%B8%D1%81%D0%BE%D0%BA-%D0%BF%D0%BE%D0%BB%D0%B5%D0%B9-%D0%BE%D1%81%D0%BD%D0%BE%D0%B2%D0%BD%D1%8B%D1%85-%D0%BD%D0%B0%D1%81%D1%82%D1%80%D0%BE%D0%B5%D0%BA)"
					},
					"response": []
				},
				{
					"name": "getSettingsKey",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{adminToken}}",
									"type": "string"
								},
								{
									"key": "password",
									"value": "{{adminToken}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{url}}/api/v1/admin/settings?key=founderPhoto",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"v1",
								"admin",
								"settings"
							],
							"query": [
								{
									"key": "key",
									"value": "founderPhoto"
								}
							]
						},
						"description": "# Получить значение одной настройки\r\n* Параметры\r\n  * key - Любое значение из списка настроек. Список настроек можно посмотреть в описание АПИ getAllSettings"
					},
					"response": []
				}
			]
		},
		{
			"name": "MainSlider",
			"item": [
				{
					"name": "Get slider",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{adminToken}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": []
						},
						"url": {
							"raw": "{{url}}/api/v1/admin/slider",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"v1",
								"admin",
								"slider"
							]
						},
						"description": "# Получаем список всех слайдов главного слайдере\r\n* Результат\r\n  * id - ID слайда\r\n  * name - Заголовок или название слайда\r\n  * description - Это подзаголовок. Хз зачем его Коля название description\r\n  * bgColor - Цвет фона\r\n  * order - Порядок сортировки\r\n  * active - Показывать или нет\r\n* Сортировка\r\n  * Задана жестко. Сначала сортируем по полю order, потом по name"
					},
					"response": []
				},
				{
					"name": "Add slide to slider",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Exists id of slide\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.result.id).to.greaterThan(0);\r",
									"    pm.expect(jsonData.success).to.equal(true);\r",
									"    if(jsonData.success) {\r",
									"        pm.globals.set(\"lastCreatedSlideId\", jsonData.result.id);\r",
									"    }\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{adminToken}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "image",
									"type": "file",
									"src": "/C:/Users/Иван/Pictures/siluet_tuman_derevia_133557_1920x1080.jpg"
								},
								{
									"key": "name",
									"value": "Slider 4",
									"type": "text"
								},
								{
									"key": "description",
									"value": "Some additional text",
									"type": "text"
								},
								{
									"key": "bgColor",
									"value": "#FF00FF",
									"type": "text"
								},
								{
									"key": "order",
									"value": "100",
									"type": "text"
								},
								{
									"key": "active",
									"value": "1",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{url}}/api/v1/admin/slider",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"v1",
								"admin",
								"slider"
							]
						},
						"description": "# Добавление слайда в слайдер\r\n* Параметры\r\n  * Перечислены в АПИ **Get slider**\r\n  * Все поля являются обязательными"
					},
					"response": []
				},
				{
					"name": "Update slide",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{adminToken}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "name",
									"value": "new",
									"type": "text"
								},
								{
									"key": "order",
									"value": "100",
									"type": "text"
								},
								{
									"key": "description",
									"value": "new subtitle",
									"type": "text"
								},
								{
									"key": "bgColor",
									"value": "#22DAAA",
									"type": "text"
								},
								{
									"key": "active",
									"value": "0",
									"type": "text"
								},
								{
									"key": "image",
									"type": "file",
									"src": "/C:/Users/Иван/Pictures/s1200.jpg",
									"disabled": true
								}
							]
						},
						"url": {
							"raw": "{{url}}/api/v1/admin/slider/{{lastCreatedSlideId}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"v1",
								"admin",
								"slider",
								"{{lastCreatedSlideId}}"
							]
						},
						"description": "# Обновление параметров слайдера\r\n* Параметры\r\n    * Все возможные параметры перечислены в **Get slider**"
					},
					"response": []
				},
				{
					"name": "Get slide info",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{adminToken}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": []
						},
						"url": {
							"raw": "{{url}}/api/v1/admin/slider/{{lastCreatedSlideId}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"v1",
								"admin",
								"slider",
								"{{lastCreatedSlideId}}"
							]
						},
						"description": "# Возвращаем информацию об одном слайде\r\n* Параметры\r\n    * ID слайда задается через параметр URL"
					},
					"response": []
				},
				{
					"name": "Delete slide",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{adminToken}}",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": []
						},
						"url": {
							"raw": "{{url}}/api/v1/admin/slider/{{lastCreatedSlideId}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"v1",
								"admin",
								"slider",
								"{{lastCreatedSlideId}}"
							]
						},
						"description": "# Удаление слайда\r\n* Параметры\r\n    * Параметр слайда для удаления передается через параметры url адреса. В качестве параметра используется ид. слайда.\r\n* Примечание\r\n    * Повторное удаление уже удаленного слайда приведет к ошибке"
					},
					"response": []
				}
			],
			"auth": {
				"type": "bearer",
				"bearer": [
					{
						"key": "token",
						"value": "{{adminToken}}",
						"type": "string"
					}
				]
			},
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "Groups",
			"item": [
				{
					"name": "Create group",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Exists id of group\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.result.id).to.greaterThan(0);\r",
									"    pm.expect(jsonData.success).to.equal(true);\r",
									"    if(jsonData.success) {\r",
									"        pm.globals.set(\"lastCreatedGroupId\", jsonData.result.id);\r",
									"    }\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{adminToken}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "image",
									"type": "file",
									"src": "/C:/Users/Иван/Pictures/photo_2020-11-29_00-37-29.jpg"
								},
								{
									"key": "name",
									"value": "Группа 3567",
									"type": "text"
								},
								{
									"key": "active",
									"value": "1",
									"type": "text"
								},
								{
									"key": "order",
									"value": "200",
									"type": "text"
								},
								{
									"key": "bgColor",
									"value": "#ABC",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{url}}/api/v1/admin/groups",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"v1",
								"admin",
								"groups"
							]
						},
						"description": "# Добавление группы\r\n* Параметры\r\n    * image - Картинка. Макс 5Мб.\r\n    * name - Название группы\r\n    * active - Показывать или не показывать группу на клиенте\r\n    * order - Порядковый номер группы. Используется дя сортировки.\r\n    * bgColor - Цвет фона. Задается в виде #XXXXXX"
					},
					"response": []
				},
				{
					"name": "Get all groups",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{adminToken}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "name",
									"value": "13",
									"type": "text",
									"disabled": true
								}
							]
						},
						"url": {
							"raw": "{{url}}/api/v1/admin/groups",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"v1",
								"admin",
								"groups"
							]
						},
						"description": "# Возвращаем список всех групп\r\n* Параметры\r\n    * Нет\r\n* Сортировка\r\n    * Задана жестко. Сначала сортируем по полю order, потом по полю name\r\n* Пагинация\r\n    * Её нет. Групп будет не так много. Можно вывести сразу все.\r\n* Результат\r\n    * Поля группы. Плюс добавляем поле **tags** В этом поле содержится список уникальных тегов вложенных товаров"
					},
					"response": []
				},
				{
					"name": "Get group",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{adminToken}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": []
						},
						"url": {
							"raw": "{{url}}/api/v1/admin/groups/{{lastCreatedGroupId}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"v1",
								"admin",
								"groups",
								"{{lastCreatedGroupId}}"
							]
						},
						"description": "# Получить информаицю о таварной группе\r\n* Параметры\r\n    * Ид. группы задается в параметрах URL"
					},
					"response": []
				},
				{
					"name": "Update group",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{adminToken}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "image",
									"type": "file",
									"src": [],
									"disabled": true
								},
								{
									"key": "name",
									"value": "fourth (4)332",
									"type": "text",
									"disabled": true
								},
								{
									"key": "active",
									"value": "1",
									"type": "text"
								},
								{
									"key": "order",
									"value": "33",
									"type": "text"
								},
								{
									"key": "bgColor",
									"value": "#112233",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{url}}/api/v1/admin/groups/{{lastCreatedGroupId}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"v1",
								"admin",
								"groups",
								"{{lastCreatedGroupId}}"
							]
						},
						"description": "# Обновление данных группы\r\n* Параметры перечислены в АПИ **Create group**"
					},
					"response": []
				},
				{
					"name": "Delete group",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{adminToken}}",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{url}}/api/v1/admin/groups/{{lastCreatedGroupId}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"v1",
								"admin",
								"groups",
								"{{lastCreatedGroupId}}"
							]
						},
						"description": "# Удаление группы\r\n* Параметры\r\n    * Ид. группы, которую нужно удалить, передается в параметрах URL"
					},
					"response": []
				}
			],
			"description": "Работа с группами товаров. \r\n",
			"auth": {
				"type": "bearer",
				"bearer": [
					{
						"key": "token",
						"value": "{{adminToken}}",
						"type": "string"
					}
				]
			},
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "Units",
			"item": [
				{
					"name": "Add unit",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Exists id of units\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.result.id).to.greaterThan(0);\r",
									"    pm.expect(jsonData.success).to.equal(true);\r",
									"    if(jsonData.success) {\r",
									"        pm.globals.set(\"lastCreatedUnitId\", jsonData.result.id);\r",
									"    }\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{adminToken}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "fullName",
									"value": "Вес",
									"description": "Полное название ед. измерения. Например Килограмм",
									"type": "text"
								},
								{
									"key": "shortName",
									"value": "кг.",
									"description": "Краткое название ед. измерения. Например кг.",
									"type": "text"
								},
								{
									"key": "shortDerName",
									"value": "гр.",
									"description": "Сокр. производное название",
									"type": "text"
								},
								{
									"key": "step",
									"value": "100",
									"description": "Шаг изменения. Целое число.\n",
									"type": "text"
								},
								{
									"key": "factor",
									"value": "1000",
									"description": "Кратность",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{url}}/api/v1/admin/units",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"v1",
								"admin",
								"units"
							]
						},
						"description": "# Создание ед. измерения\r\n* Параметры\r\n    * Описание параметров дано в запросе. Все поля являются обязательными."
					},
					"response": []
				},
				{
					"name": "Edit unit",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{adminToken}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "fullName",
									"value": "Вес1",
									"type": "text"
								},
								{
									"key": "shortName",
									"value": "кг1",
									"type": "text"
								},
								{
									"key": "shortDerName",
									"value": "гр1",
									"type": "text"
								},
								{
									"key": "step",
									"value": "101",
									"type": "text"
								},
								{
									"key": "factor",
									"value": "1001",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{url}}/api/v1/admin/units/{{lastCreatedUnitId}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"v1",
								"admin",
								"units",
								"{{lastCreatedUnitId}}"
							]
						},
						"description": "# Редактирование единицы измерения\r\n* Параметры\r\n    * Параметры перечислены в АПИ **Add Unit**"
					},
					"response": []
				},
				{
					"name": "Get unit info",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{adminToken}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{url}}/api/v1/admin/units/{{lastCreatedUnitId}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"v1",
								"admin",
								"units",
								"{{lastCreatedUnitId}}"
							]
						},
						"description": "# Получаем информацию об одное единицы измерения\r\n* Параметры\r\n    * ID передается через URL"
					},
					"response": []
				},
				{
					"name": "All units",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{adminToken}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{url}}/api/v1/admin/units",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"v1",
								"admin",
								"units"
							]
						},
						"description": "# Получаем весь список единиц измерения\r\n* Сортировка и пагинация\r\n    * Этого нет т.к нет необходимости"
					},
					"response": []
				},
				{
					"name": "Delete unit",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{adminToken}}",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{url}}/api/v1/admin/units/{{lastCreatedUnitId}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"v1",
								"admin",
								"units",
								"{{lastCreatedUnitId}}"
							]
						},
						"description": "# Удаление единицы измерения\r\n* Параметры\r\n    * ID единицы измерения передается в параметрах url"
					},
					"response": []
				}
			],
			"auth": {
				"type": "bearer",
				"bearer": [
					{
						"key": "token",
						"value": "{{adminToken}}",
						"type": "string"
					}
				]
			},
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "Tags",
			"item": [
				{
					"name": "All tags",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"console.log(pm.info.requestId)"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{adminToken}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{url}}/api/v1/admin/tags",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"v1",
								"admin",
								"tags"
							]
						},
						"description": "# Возвращаем полный список тегов для товаров\r\n* Описание\r\n    * Теги - это удобный способ фильтровать товары по предпочтениям. Например, менеджер добавляет тег **Веганский** и назначает этот тег все товаров, которые являются веганискими продуктами. Клиент может фильтровать товары по этмоу тегу.\r\n* Сортировка и пагинация\r\n    * Сортировка задана жестко. Сначала по полю order, потом по полю name. Пагинации нет."
					},
					"response": []
				},
				{
					"name": "Add tag",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Exists id of tags\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.result.id).to.greaterThan(0);\r",
									"    pm.expect(jsonData.success).to.equal(true);\r",
									"    if(jsonData.success) {\r",
									"        pm.globals.set(\"lastCreatedTagId\", jsonData.result.id);\r",
									"    }\r",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{adminToken}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "name",
									"value": "Пример тега2",
									"type": "text"
								},
								{
									"key": "order",
									"value": "1",
									"description": "Порядок отображения тега в моб. приложении. Макс. знач. 1000",
									"type": "text"
								},
								{
									"key": "active",
									"value": "1",
									"description": "Отображить тег в моб. приложении или нет",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{url}}/api/v1/admin/tags",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"v1",
								"admin",
								"tags"
							]
						},
						"description": "# Создание нового тега\r\n* Параметры\r\n    * name - Название\r\n    * order - Порядковый номер. Отвечает за порядок вывода тегов на клиенте. Макс. значение 1000\r\n    * active - Флаг активности. Клиент видит только активные теги."
					},
					"response": []
				},
				{
					"name": "Get tag info",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{adminToken}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{url}}/api/v1/admin/tags/{{lastCreatedTagId}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"v1",
								"admin",
								"tags",
								"{{lastCreatedTagId}}"
							]
						},
						"description": "# Получение информации о теге\r\n* Параметры\r\n    * ИД. тега передается в параметрах запроса"
					},
					"response": []
				},
				{
					"name": "Edit tag",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{adminToken}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "name",
									"value": "Обновление тега",
									"type": "text"
								},
								{
									"key": "order",
									"value": "150",
									"type": "text"
								},
								{
									"key": "active",
									"value": "0",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{url}}/api/v1/admin/tags/{{lastCreatedTagId}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"v1",
								"admin",
								"tags",
								"{{lastCreatedTagId}}"
							]
						},
						"description": "# Редактирование информации о теге\r\n* Параметры\r\n    * Перечислены в АПИ **Add tag**"
					},
					"response": []
				},
				{
					"name": "Delete tag",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{adminToken}}",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{url}}/api/v1/admin/tags/{{lastCreatedTagId}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"v1",
								"admin",
								"tags",
								"{{lastCreatedTagId}}"
							]
						},
						"description": "# Удаление тега\r\n* Параметры\r\n    * ID тега для удаления передается в параметрах URL"
					},
					"response": []
				}
			]
		},
		{
			"name": "Products",
			"item": [
				{
					"name": "Add product",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Exists id of products\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.result.id).to.greaterThan(0);\r",
									"    pm.expect(jsonData.success).to.equal(true);\r",
									"    if(jsonData.success) {\r",
									"        pm.globals.set(\"lastCreatedProductId\", jsonData.result.id);\r",
									"    }\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{adminToken}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "active",
									"value": "true",
									"description": "Флаг активности. Можно передавать true|false 1|0",
									"type": "text"
								},
								{
									"key": "name",
									"value": "Свежий банан",
									"description": "Название продукта",
									"type": "text"
								},
								{
									"key": "description",
									"value": "Большой и красивый банан",
									"description": "Описание продукта.",
									"type": "text"
								},
								{
									"key": "image",
									"description": "Картинка для продукта.",
									"type": "file",
									"src": "/C:/Users/Иван/Pictures/2019-01-28_182632.png"
								},
								{
									"key": "unitId",
									"value": "1",
									"description": "Ид. единицы измерения.",
									"type": "text"
								},
								{
									"key": "unitStep",
									"value": "100",
									"description": "Мин. число продукта доступное для заказа. Целое число.",
									"type": "text"
								},
								{
									"key": "price",
									"value": "10000",
									"description": "Цена продукта в рублях. Целое число.",
									"type": "text"
								},
								{
									"key": "bonusesPercentage",
									"value": "0",
									"description": "Какой процент от цены будет начислен пользователю после покупки",
									"type": "text"
								},
								{
									"key": "groupId",
									"value": "3",
									"description": "Ид. группы продукта\n",
									"type": "text"
								},
								{
									"key": "tags[]",
									"value": "1",
									"description": "Ид. тегов",
									"type": "text"
								},
								{
									"key": "tags[]",
									"value": "2",
									"description": "Ид. тегов",
									"type": "text"
								},
								{
									"key": "promotion\n",
									"value": "DP",
									"description": "Признак акционного продукта. Принимает DP | WP и пустую строку",
									"type": "text"
								},
								{
									"key": "order",
									"value": "12",
									"description": "Порядковый номер продукта",
									"type": "text"
								},
								{
									"key": "composition",
									"value": "Желуди",
									"type": "text"
								},
								{
									"key": "shelfLife",
									"value": "Хранить в банках. ",
									"type": "text"
								},
								{
									"key": "nutrition",
									"value": "200 Углеводов 300 Жиров 100 Белков",
									"type": "text"
								},
								{
									"key": "netCostPerStep",
									"value": "100",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{url}}/api/v1/admin/products",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"v1",
								"admin",
								"products"
							]
						},
						"description": "# Добавление продукта\r\n* Параметры\r\n    * active - Флаг активности продукта\r\n    * name - Название продукта\r\n    * groupId - Ид. группы товаров. При помощи этого параметра можно выводить товары в определенной группе.\r\n    * description - Описание\r\n    * image - Картинка продукта\r\n    * unitId - ид. единицы измерения\r\n    * unitMin - мин. значение ид. измерения\r\n    * price - Цена товара\r\n    * bonusPercentage - процент кешбека для товара\r\n    * tags[] - Массив ид. тегов\r\n    * promotion - Признак акционного товара. Возможные значения WP - продукт недели, DP - продукт дня и пустая строка, которая означает, что товар не акционный\r\n    * order - Порядковый номер товара. Используется при сортировке.\r\n    * **NEW**\r\n    * composition - Состав продукта\r\n    * shelfLife - Срок хранения. Описание способа хранения продукта.\r\n    * nutrition - БЖУ"
					},
					"response": []
				},
				{
					"name": "Search products",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Exists id of tags\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property('result');\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{adminToken}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{url}}/api/v1/admin/products?perPage=200&page=1&onlyActive=false",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"v1",
								"admin",
								"products"
							],
							"query": [
								{
									"key": "perPage",
									"value": "200",
									"description": "Число элементов на странице"
								},
								{
									"key": "page",
									"value": "1",
									"description": "Номер страницы. Начинается с 1"
								},
								{
									"key": "groupId",
									"value": "1",
									"description": "Ид. группы продуктов",
									"disabled": true
								},
								{
									"key": "name",
									"value": "Говнядина тушеная",
									"description": "Полное название или чать названия продукта",
									"disabled": true
								},
								{
									"key": "onlyActive",
									"value": "false",
									"description": "Искать только продукты с установленным флажком active. Для всех доступных в поиске продуктор этот флажок должен быть установлен.\n"
								},
								{
									"key": "onlyPromotion",
									"value": "true",
									"description": "Искать только акционные продукты. Возможные значения( DP, WP и пустая строка)",
									"disabled": true
								},
								{
									"key": "tags[]",
									"value": "2",
									"description": "Ид. тегов",
									"disabled": true
								},
								{
									"key": "tags[]",
									"value": "6",
									"description": "Ид. тегов",
									"disabled": true
								},
								{
									"key": "sort",
									"value": "sim",
									"disabled": true
								},
								{
									"key": "sortDirect",
									"value": "desc",
									"disabled": true
								},
								{
									"key": "id",
									"value": "6",
									"disabled": true
								}
							]
						},
						"description": "# Поиск продуктов\r\n* Описание\r\n    * Универсальные поиск продуктов для бекенда. Поддерживаются параметры фильтрации, сортировка и пагинация.\r\n* Параметры\r\n    * page - Номер страницы для отображения\r\n    * perPage - Число продуктов на одной странице\r\n    * groupId - Ид. группы товаров. При помощи этого параметра можно выводить товары в определенной группе.\r\n    * name - Название товара. Можно вводить как полное название, так и частичное, не полное название.\r\n    * onlyActive - Выводить только активные товары\r\n    * onlyPromotion - Выводим только акционные товары т.е товары с указанной акцией\r\n    * tags[] - Массив тегов. В этот параметре передаем ид. тегов\r\n    * sort - Название поля сортировки. Возможные значения order и name. Означают сортировка по порядковому номеру и названию.\r\n    * sortDirect - Направление сортировки. Возможные значения **asc** и **desc**, что означает прямой и обратный порядок.\r\n    * id - Ид. продукта\r\n* Результат\r\n    * Список продуктов\r\n    * Данные по пагинации\r\n        * lastPage - номер последней страницы исходя из параметра perPage\r\n        * perPage - число элементов на странице\r\n        * total - общее число найденных элементов\r\n        * hasMorePages - есть ли непросмотренные страницы, если currentPage < lastPage"
					},
					"response": []
				},
				{
					"name": "Get product",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{adminToken}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{url}}/api/v1/admin/products/{{lastCreatedProductId}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"v1",
								"admin",
								"products",
								"{{lastCreatedProductId}}"
							]
						},
						"description": "# Получение информации о продукте\r\n* Параметры\r\n    * ИД передается через параметры URL\r\n* Результат\r\n    * id - ид. товара\r\n    * active - флаг активности\r\n    * name - название\r\n    * order - порядок сортировки\r\n    * unitId - ид. единицы измерения\r\n    * productUnitMin - ед. измерения, которая задается в продукте, а не в ед. измерения\r\n    * unitMin - мин. значение едининцы измерения, задается в ед. измерения\r\n    * unitFullName, unitMinName - названия ед. измерения\r\n    * unitStep - шаг ед. измерения\r\n    * groupId - ид. группы\r\n    * groupName - название группы\r\n    * tags - Массив назначенных товару тегов. Представляет собой массив массивов, где 0 элементе - это ид. тега, 1 элемента - название тега\r\n    * iamgeSrc - ссылка на картинку\r\n    * certs - массив ссылок на картинки сертификатов\r\n    * shelfLife - срок годности, описание способа хранения\r\n    * composition - состав\r\n    * nutrition - БЖУ"
					},
					"response": []
				},
				{
					"name": "Update product",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{adminToken}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "active",
									"value": "false",
									"type": "text"
								},
								{
									"key": "name",
									"value": "Торт1",
									"type": "text"
								},
								{
									"key": "description",
									"value": "Большой и красивый dasdas",
									"type": "text"
								},
								{
									"key": "unitId",
									"value": "1",
									"type": "text"
								},
								{
									"key": "unitStep",
									"value": "454",
									"type": "text"
								},
								{
									"key": "price",
									"value": "101",
									"type": "text"
								},
								{
									"key": "bonusesPercentage",
									"value": "0",
									"type": "text"
								},
								{
									"key": "groupId",
									"value": "2",
									"type": "text"
								},
								{
									"key": "tags[]",
									"value": "3",
									"type": "text"
								},
								{
									"key": "order",
									"value": "7",
									"type": "text"
								},
								{
									"key": "image",
									"type": "file",
									"src": "/C:/Users/Иван/Pictures/2019-01-28_171521.png"
								},
								{
									"key": "promotion",
									"value": "",
									"type": "text"
								},
								{
									"key": "shelfLife",
									"value": "Хранить в банках",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{url}}/api/v1/admin/products/{{lastCreatedProductId}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"v1",
								"admin",
								"products",
								"{{lastCreatedProductId}}"
							],
							"query": [
								{
									"key": "",
									"value": "",
									"disabled": true
								}
							]
						},
						"description": "# Обновление данных продукта\r\n* Параметры\r\n    * Все параметры перечислены в АПИ **Add product**"
					},
					"response": []
				},
				{
					"name": "Add certificate to product",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Exists id of prod certs\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.success).to.equal(true);\r",
									"    pm.expect(jsonData.result[0].id).to.greaterThan(0);\r",
									"    if(jsonData.success) {\r",
									"        pm.globals.set(\"lastCreatedProdCertId\", jsonData.result[0].id);\r",
									"    }\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{adminToken}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "images[]",
									"description": "Можно указывать несколько сертификатов",
									"type": "file",
									"src": "/C:/Users/Иван/Pictures/11313208_103548969985147_894888127_n.jpg"
								},
								{
									"key": "images[]",
									"type": "file",
									"src": "/C:/Users/Иван/Pictures/photo_2020-11-29_00-37-29.jpg"
								}
							]
						},
						"url": {
							"raw": "{{url}}/api/v1/admin/images/prodCertificates/{{lastCreatedProductId}}/upload",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"v1",
								"admin",
								"images",
								"prodCertificates",
								"{{lastCreatedProductId}}",
								"upload"
							]
						},
						"description": "# Добавляем сртификат к продукту\r\n* Результат\r\n    * Список всех сертификатов продукта отсортированный по полю order"
					},
					"response": []
				},
				{
					"name": "Get product certificates",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{adminToken}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{url}}/api/v1/admin/images/prodCertificates/{{lastCreatedProductId}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"v1",
								"admin",
								"images",
								"prodCertificates",
								"{{lastCreatedProductId}}"
							]
						},
						"description": "# Возвращаем список сертификатов определенного продукта\r\n* Параметры\r\n    * prodCertificates - название группы картинок сертификатов. Передается через параметры url\r\n    * ИД. товара с которым связаны сертификаты, передается через параметры url\r\n* Результат\r\n    * Список сертификатов товара отсортированных по полю order"
					},
					"response": []
				},
				{
					"name": "Update product crtificate",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{adminToken}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "data[0][id]",
									"value": "68",
									"description": "Ид. загруженного изображения сертификата",
									"type": "text"
								},
								{
									"key": "data[0][order]",
									"value": "11",
									"description": "Нового значение порядкового номера сертификата",
									"type": "text"
								},
								{
									"key": "data[1][id]",
									"value": "69",
									"description": "Ид. загруженного изображения сертификата",
									"type": "text"
								},
								{
									"key": "data[1][order]",
									"value": "1",
									"description": "Нового значение порядкового номера сертификата",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{url}}/api/v1/admin/images/prodCertificates/{{lastCreatedProductId}}/update",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"v1",
								"admin",
								"images",
								"prodCertificates",
								"{{lastCreatedProductId}}",
								"update"
							]
						},
						"description": "# Обнвоелнеи данных сертификата\r\n* Описание\r\n    * Обновляем порядок следования сертификатов\r\n* Парметры\r\n    * prodCertificates - Название группы для хранения картинок сертификатов. Передается через url.\r\n    * Id товара - Ид. товара к которому привязаны сертификаты. Передается через url.\r\n    * data - Массив ассоциативных массивов. Ключ id - ид. сертификата, order - новый порядоквый номер"
					},
					"response": []
				},
				{
					"name": "Delete product cetificate",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{adminToken}}",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "ids[]",
									"value": "70",
									"description": "Ид. картинки для удаления. Можно передать несколько параметров.",
									"type": "text"
								},
								{
									"key": "ids[]",
									"value": "11",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{url}}/api/v1/admin/images/prodCertificates/{{lastCreatedProdCertId}}/destroy",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"v1",
								"admin",
								"images",
								"prodCertificates",
								"{{lastCreatedProdCertId}}",
								"destroy"
							]
						},
						"description": "# Удаление сертификата\r\n* Параметры\r\n    * prodCertificates - название группы для хранения сертифкиатов. Передается в параметрах URL\r\n    * ид. сертификата - Ид. сертификата. Выводится в списке сертификатов см. АПИ **Get product certificates**\r\n* Результат\r\n    * Всегда возвращаем success, даже если сертификат был удален раньше"
					},
					"response": []
				},
				{
					"name": "Delete product",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{adminToken}}",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{url}}/api/v1/admin/products/{{lastCreatedProductId}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"v1",
								"admin",
								"products",
								"{{lastCreatedProductId}}"
							]
						},
						"description": "# Удаление продукта\r\n* Параметры\r\n    * ID Товара. Передается в параметрах URL"
					},
					"response": []
				}
			]
		},
		{
			"name": "Gifts",
			"item": [
				{
					"name": "Add gift",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Exists id of gift\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.result.id).to.greaterThan(0);\r",
									"    pm.expect(jsonData.success).to.equal(true);\r",
									"    if(jsonData.success) {\r",
									"        pm.globals.set(\"lastCreatedGiftId\", jsonData.result.id);\r",
									"    }\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "name",
									"value": "Подарок",
									"description": "Название подарка",
									"type": "text"
								},
								{
									"key": "order",
									"value": "100",
									"description": "Порядковый номер(ранг)",
									"type": "text"
								},
								{
									"key": "active",
									"value": "true",
									"description": "Признак активности",
									"type": "text"
								},
								{
									"key": "description",
									"value": "игрушка в форме слоника",
									"description": "Описание подарка",
									"type": "text"
								},
								{
									"key": "composition",
									"value": "Чудо китайской промышленности с алика",
									"description": "Состав, если есть.",
									"type": "text"
								},
								{
									"key": "shelfLife",
									"value": "Хранить в хорошо проветриваемом месте. Не дома",
									"description": "Описание способа хранения",
									"type": "text"
								},
								{
									"key": "image",
									"type": "file",
									"src": "/C:/Users/Иван/Pictures/11313208_103548969985147_894888127_n.jpg",
									"disabled": true
								},
								{
									"key": "price",
									"value": "100",
									"description": "Число бонусных баллов для получения подарка",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{url}}/api/v1/admin/gifts",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"v1",
								"admin",
								"gifts"
							]
						},
						"description": "# Создание подарка\r\n* Описание\r\n    * Подарки - это товары, которые клиент может выбрать при накоплении на его бонусном счете определенного числа баллов. Подарки практически товарам, но есть и отличия.\r\n* Параметры\r\n    * name - Название подарка\r\n    * order - Порядковый номер при выводе на клиенте\r\n    * active - Признак активности. Неактивные товары не отображаются в приложении. Принимает 2 значения true и false\r\n    * name - Название подарка\r\n    * image - Картинка подарка\r\n    * description - Описание подарка\r\n    * composition - Состав\r\n    * shelfLife - Описание способа хранения\r\n* Результат\r\n    * Данные созданной сущности"
					},
					"response": []
				},
				{
					"name": "List gifts",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{url}}/api/v1/admin/gifts?onlyActive=false&sort=order&sortDirect=asc",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"v1",
								"admin",
								"gifts"
							],
							"query": [
								{
									"key": "onlyActive",
									"value": "false"
								},
								{
									"key": "sort",
									"value": "order"
								},
								{
									"key": "sortDirect",
									"value": "asc"
								}
							]
						},
						"description": "# Получить список всех подарков\r\n* Описание - Возвращаем спиок всех подарков\r\n* Параметры\r\n    * onlyActive - Возвращаем список только активных подарков\r\n    * sort - Поле сортировки. Может принимать 2 значения: name и order\r\n    * sortDirect - Прямой и обратный порядок сортировки. Два значения asc и desc\r\n* Пагинация\r\n    * Её нет т.к список подарков может быть небольшим"
					},
					"response": []
				},
				{
					"name": "Edit gift",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "name",
									"value": "Игрушка",
									"type": "text"
								},
								{
									"key": "description",
									"value": "Розовый слоник для малышей",
									"type": "text"
								},
								{
									"key": "order",
									"value": "1",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{url}}/api/v1/admin/gifts/{{lastCreatedGiftId}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"v1",
								"admin",
								"gifts",
								"{{lastCreatedGiftId}}"
							]
						},
						"description": "# Редактирвоание подарка\r\n* Параметры\r\n    * ИД. подрка передается в параметраъ URL адреса\r\n    * Остальные поля можно подсмотреть в АПИ **Add gift**"
					},
					"response": []
				},
				{
					"name": "Get gift",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{url}}/api/v1/admin/gifts/{{lastCreatedGiftId}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"v1",
								"admin",
								"gifts",
								"{{lastCreatedGiftId}}"
							]
						},
						"description": "# Получаем информацию о подарке\r\n* Описание - Возвращаем всю информацию о подарке по его номеру. Номер передается через url параметры."
					},
					"response": []
				},
				{
					"name": "Delete gift",
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{url}}/api/v1/admin/gifts/{{lastCreatedGiftId}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"v1",
								"admin",
								"gifts",
								"{{lastCreatedGiftId}}"
							]
						},
						"description": "# Удаление подарка\r\n* Параметры - ид. подкарка передается в url адресе"
					},
					"response": []
				}
			],
			"description": "Подарки",
			"auth": {
				"type": "bearer",
				"bearer": [
					{
						"key": "token",
						"value": "{{adminToken}}",
						"type": "string"
					}
				]
			},
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "Delivery intervals",
			"item": [
				{
					"name": "Add delivery interval",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Exists id of delivery interval\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.result.id).to.greaterThan(0);\r",
									"    pm.expect(jsonData.success).to.equal(true);\r",
									"    if(jsonData.success) {\r",
									"        pm.globals.set(\"lastCreatedDIId\", jsonData.result.id);\r",
									"    }\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{adminToken}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "dayOfWeek",
									"value": "7",
									"type": "text"
								},
								{
									"key": "startHour",
									"value": "1",
									"type": "text"
								},
								{
									"key": "startMinute",
									"value": "0",
									"type": "text"
								},
								{
									"key": "endHour",
									"value": "2",
									"type": "text"
								},
								{
									"key": "endMinute",
									"value": "1",
									"type": "text"
								},
								{
									"key": "active",
									"value": "true",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{url}}/api/v1/admin/di",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"v1",
								"admin",
								"di"
							]
						},
						"description": "# Создание нового интервала доставки\r\n* Параметры\r\n    * dayOfWee - День недели. 1 - Пн, 7 - Вс\r\n    * startHour - Начальный промежуток времени. Часы\r\n    * startMinue - Начальный промежуток времени. Минуты\r\n    * endHour - Конечный промежуток времени. Часы\r\n    * endMinue - Конечный промежуток времени. Минуты\r\n    * active - Флаг активности интервала"
					},
					"response": []
				},
				{
					"name": "List delivery intervals",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{url}}/api/v1/admin/di",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"v1",
								"admin",
								"di"
							]
						},
						"description": "# Получаем список интервалов\r\n* Описание возвращаем список всех интервалов доставки. Они отсортированы по дню недели и по времени начала."
					},
					"response": []
				},
				{
					"name": "Edit delivery interval",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "dayOfWeek",
									"value": "1",
									"type": "text"
								},
								{
									"key": "startHour",
									"value": "2",
									"type": "text"
								},
								{
									"key": "startMinute",
									"value": "1",
									"type": "text"
								},
								{
									"key": "endHour",
									"value": "2",
									"type": "text"
								},
								{
									"key": "endMinute",
									"value": "2",
									"type": "text"
								},
								{
									"key": "active",
									"value": "true",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{url}}/api/v1/admin/di/{{lastCreatedDIId}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"v1",
								"admin",
								"di",
								"{{lastCreatedDIId}}"
							]
						},
						"description": "# Редактирование интервала\r\n* Описание\r\n    * Редактирование интервала\r\n* Параметр\r\n    * Все поля являются обязательными. Описание полей в АПИ **Add delivery interval**"
					},
					"response": []
				},
				{
					"name": "Get delivery interval",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{url}}/api/v1/admin/di/{{lastCreatedDIId}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"v1",
								"admin",
								"di",
								"{{lastCreatedDIId}}"
							]
						},
						"description": "# Возвращаем данные по одному интервалу доставки\r\n* Параметры\r\n    * ИД. интервала передаются через параметры url"
					},
					"response": []
				},
				{
					"name": "Delete delivery interval",
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{url}}/api/v1/admin/di/{{lastCreatedDIId}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"v1",
								"admin",
								"di",
								"{{lastCreatedDIId}}"
							]
						},
						"description": "# Удаление интервала по его ID"
					},
					"response": []
				}
			],
			"auth": {
				"type": "bearer",
				"bearer": [
					{
						"key": "token",
						"value": "{{adminToken}}",
						"type": "string"
					}
				]
			},
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "Clients",
			"item": [
				{
					"name": "List clients",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{adminToken}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{url}}/api/v1/admin/clients",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"v1",
								"admin",
								"clients"
							],
							"query": [
								{
									"key": "id",
									"value": "1",
									"disabled": true
								},
								{
									"key": "phone",
									"value": "51",
									"disabled": true
								},
								{
									"key": "name",
									"value": "Ива",
									"disabled": true
								},
								{
									"key": "platform",
									"value": "iOS",
									"disabled": true
								},
								{
									"key": "dtRegBegin",
									"value": "16.11.2020",
									"disabled": true
								},
								{
									"key": "dtRegEnd",
									"value": "18.11.2020",
									"disabled": true
								},
								{
									"key": "dtLastLoginBegin",
									"value": "11.11.2020",
									"disabled": true
								},
								{
									"key": "dtLastLoginEnd",
									"value": "12.12.2020",
									"disabled": true
								},
								{
									"key": "perPage",
									"value": "1",
									"disabled": true
								},
								{
									"key": "page",
									"value": "1",
									"disabled": true
								},
								{
									"key": "sort",
									"value": "lastLoginAt",
									"disabled": true
								},
								{
									"key": "sortDirect",
									"value": "desc",
									"disabled": true
								}
							]
						},
						"description": "# Список клиентов\r\n* Описание\r\n    * Возвращает список клбентов для показа в админке\r\n* Параметры\r\n    * id - Найти клиента по его id\r\n    * phone - Поиск по частичному совпадению номера. Можно передавать только часть цифр\r\n    * name - Поиск по части имени клиента\r\n    * platform - Поиск по платформе пользователя. Возможные значенения - iOS, Android, Site, na\r\n    * dtRegBegin и dtRegEnd - Промежуто по дате регистрации\r\n    * dtLastLoginBegin и dtLastLoginEnd - Промежуток по дате последнего логина\r\n    * perPage - Число элементов на одной страничке\r\n    * page - Тек. страница\r\n    * sort - Поле по которому сортировать результат. Возможные значения name, lastLogin, createdAt\r\n    * sortDirect - Направление сортировки. Возможные значение asc и desc"
					},
					"response": []
				},
				{
					"name": "Show",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{adminToken}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{url}}/api/v1/admin/clients/25",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"v1",
								"admin",
								"clients",
								"25"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update info",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{adminToken}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "birthday",
									"value": "11.01.2022",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{url}}/api/v1/admin/clients/7",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"v1",
								"admin",
								"clients",
								"7"
							]
						},
						"description": "# Изменение данных клиента\n\nМенять можем только след. набор параметров:\n* name\n* email\n* birthday в формате выбранного языка\n* allowMailing"
					},
					"response": []
				},
				{
					"name": "Change bonuses",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{adminToken}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "bonuses",
									"value": "100",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{url}}/api/v1/admin/clients/1/bonuses",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"v1",
								"admin",
								"clients",
								"1",
								"bonuses"
							]
						},
						"description": "# Изменяем число бонусов определенного клиента\r\n* Параметры\r\n    * id - передаётся в url\r\n    * bonuses - Число бонусов"
					},
					"response": []
				}
			],
			"auth": {
				"type": "bearer",
				"bearer": [
					{
						"key": "token",
						"value": "{{adminToken}}",
						"type": "string"
					}
				]
			},
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "Delivery areas",
			"item": [
				{
					"name": "Load KML",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{adminToken}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "kmlFile",
									"type": "file",
									"src": "/E:/Downloads/delivery.kml"
								}
							]
						},
						"url": {
							"raw": "{{url}}/api/v1/admin/da/loadKml",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"v1",
								"admin",
								"da",
								"loadKml"
							]
						},
						"description": "# Парсинг KML файла\r\n* Описание формата KML файла\r\n    * KML - это спец. формат файла, в котором содержится информация по гео объектом. Этот формат разработан компанией Google для работы с картами. Внутри себя это простой xml файл с некоторой структурой.\r\n    * Как известно, GoogleMap позволяет рисовать разные объекты, а потом их экспортировать и сохранять как отдельный файл. Экспорт как раз и происходит в формат KML\r\n    * Нарисовать и экспортировать карту и объекты можно по [ссылке](https://www.google.com/maps/d/u/0/?hl=ru) ***Важно!*** При экспорте нужно выбирать простой формат, а не KMZ\r\n* Описание API\r\n    * АПИ принимает KML файл, разбирает его и возвращает название областей, цвет и координаты вершин.\r\n    * Координаты вершин возвращаются как строка в формате **((lat,lon),(lat,lon)...)**\r\n* Параметры\r\n    * kmlFile - KML файл\r\n* Результат\r\n    * АПИ возвращает полный список областей, их названия, цвета и координаты"
					},
					"response": []
				},
				{
					"name": "Store all areas",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Exists id of delivery area\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.success).to.equal(true);\r",
									"    pm.expect(jsonData.result[0].id).to.greaterThan(0);\r",
									"    if(jsonData.success) {\r",
									"        pm.globals.set(\"lastCreatedDAId\", jsonData.result[0].id);\r",
									"    }\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{adminToken}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "names[0]",
									"value": "Район нумбер 0",
									"type": "text"
								},
								{
									"key": "colors[0]",
									"value": "#d7d7d7",
									"type": "text"
								},
								{
									"key": "polygons[0]",
									"value": "((55.7367046,37.5206105),(55.7127293,37.3819081),(55.639165,37.4533192),(55.7096347,37.5865284),(55.7367046,37.5206105))",
									"type": "text"
								},
								{
									"key": "names[1]",
									"value": "Западный район",
									"type": "text"
								},
								{
									"key": "colors[1]",
									"value": "#f1f2f3",
									"type": "text"
								},
								{
									"key": "polygons[1]",
									"value": "((55.7367046,37.5206105),(55.7127293,37.3819081),(55.639165,37.4533192),(55.7096347,37.5865284),(55.7367046,37.5206111))",
									"type": "text"
								},
								{
									"key": "prices[0]",
									"value": "1",
									"type": "text"
								},
								{
									"key": "prices[1]",
									"value": "2",
									"type": "text"
								},
								{
									"key": "actives[0]",
									"value": "false",
									"type": "text"
								},
								{
									"key": "actives[1]",
									"value": "false",
									"type": "text"
								},
								{
									"key": "deliveryFreeSums[0]",
									"value": "100",
									"type": "text"
								},
								{
									"key": "deliveryFreeSums[1]",
									"value": "200",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{url}}/api/v1/admin/da",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"v1",
								"admin",
								"da"
							]
						},
						"description": "# Сохранение областей доставки\r\n* Описание\r\n    * Сохранение полного списка областей доставки. Что бы получить данные для сохранения нужно вызвать АПИ **Load KML** файл и передать в это АПИ полученные данные.\r\n    * Все старые области доставки будут удалены\r\n* Параметры\r\n    * names - Массив. Название областей.\r\n    * colors - Массив. Цвета областей. Цвет в формате **#XXXXXX**\r\n    * polygons - Массив. Коордианаты вершин области доставки. Координаты передаются в виде строки в формате  ((lat,lon),(lat,lon)...(lat,lon))\r\n    * prices - Массив. Содержит стоимость доставки в указанную область. Должно заполняться администратором.\r\n    * activies - Флаги активности. Содержит флаги активности зон\r\n    * deliveryFreeSums - Суммы, свыше которых, доставка в указанной области становится бесплатной"
					},
					"response": []
				},
				{
					"name": "Show all area",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{url}}/api/v1/admin/da",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"v1",
								"admin",
								"da"
							]
						},
						"description": "# Возвращаем список всех зон доставки\r\n* Результат\r\n    * Описание параметров содержится в АПИ Store all areas"
					},
					"response": []
				},
				{
					"name": "Show one area",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{url}}/api/v1/admin/da/{{lastCreatedDAId}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"v1",
								"admin",
								"da",
								"{{lastCreatedDAId}}"
							]
						},
						"description": "# Возвращаем данные одной области доставки\r\n* Параметры\r\n    * ИД. области доставки передается в параметрах url\r\n* Результат\r\n    * См. описание Show all areas"
					},
					"response": []
				},
				{
					"name": "Update area",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "name",
									"value": "Новое название зоны доставки",
									"type": "text"
								},
								{
									"key": "price",
									"value": "100",
									"type": "text"
								},
								{
									"key": "color",
									"value": "#123456",
									"type": "text"
								},
								{
									"key": "active",
									"value": "false",
									"type": "text"
								},
								{
									"key": "deliveryFreeSum",
									"value": "11",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{url}}/api/v1/admin/da/{{lastCreatedDAId}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"v1",
								"admin",
								"da",
								"{{lastCreatedDAId}}"
							]
						},
						"description": "# Обновление данных одной области\r\n* Описание\r\n    * Изменяем название, цену и цвет области достави\r\n* Параметры\r\n    * ИД. передается в параметрах url\r\n    * name - Название\r\n    * color - Цвет\r\n    * price - Цена доставки\r\n    * active - Признак активности\r\n    * deliveryFreeSum - Сумма, свыше которой, в указанную зону доставка становится бесплатной"
					},
					"response": []
				}
			],
			"auth": {
				"type": "bearer",
				"bearer": [
					{
						"key": "token",
						"value": "{{adminToken}}",
						"type": "string"
					}
				]
			},
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "Orders",
			"item": [
				{
					"name": "Search orders",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{url}}/api/v1/admin/orders?sortDirect=desc&sort=interval",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"v1",
								"admin",
								"orders"
							],
							"query": [
								{
									"key": "dtCreatedBegin",
									"value": "2020-01-12",
									"disabled": true
								},
								{
									"key": "dtCreatedEnd",
									"value": "2020-04-12",
									"disabled": true
								},
								{
									"key": "dtDeliveryBegin",
									"value": "2020-01-12",
									"disabled": true
								},
								{
									"key": "dtDeliveryEnd",
									"value": "2020-02-12",
									"disabled": true
								},
								{
									"key": "dtFinishedBegin",
									"value": "2020-01-12",
									"disabled": true
								},
								{
									"key": "dtFinishedEnd",
									"value": "2020-04-12",
									"disabled": true
								},
								{
									"key": "clientId",
									"value": "2",
									"disabled": true
								},
								{
									"key": "status",
									"value": "finished",
									"disabled": true
								},
								{
									"key": "sortDirect",
									"value": "desc"
								},
								{
									"key": "sort",
									"value": "interval"
								},
								{
									"key": "dtPackedBegin",
									"value": "2020-15-12",
									"disabled": true
								},
								{
									"key": "dtPackedEnd",
									"value": "2020-15-12",
									"disabled": true
								},
								{
									"key": "deliveryHourBegin",
									"value": "1",
									"disabled": true
								},
								{
									"key": "deliveryHourEnd",
									"value": "4",
									"disabled": true
								},
								{
									"key": "clientPhone",
									"value": "41",
									"disabled": true
								},
								{
									"key": "id",
									"value": "112",
									"disabled": true
								},
								{
									"key": "showErrorsOrdersAlso",
									"value": "1",
									"disabled": true
								}
							]
						},
						"description": "# Поиск заказов для админки\r\n* Параметры\r\n    * dtCreatedBegin - Дата создания заказа с\r\n    * dtCreatedEnd - Дата создания заказа по\r\n    * dtDeliveryBegin - Дата доставки с\r\n    * dtDeliveryEnd - Дата доставки по\r\n    * dtFinishedBegin - Дата завершения заказа с\r\n    * dtFinishedEnd - Дата завершения заказа по\r\n    * client - Ид. клиента\r\n    * status - Статус заказа. См в [Wiki](https://gitlab.globalcode.eu/bv/biovillage-back/-/wikis/%D0%9E%D0%BF%D0%B8%D1%81%D0%B0%D0%BD%D0%B8%D0%B5%20%D0%BF%D0%BE%D0%BB%D0%B5%D0%B9%20%D0%B7%D0%B0%D0%BA%D0%B0%D0%B7%D0%B0)\r\n    * dtPackedBegin - Дата комплектации заказа с\r\n    * dtPackedEnd - Дата комплектации заказа по\r\n    * deliveryHourBegin - Начальный час интервала доставки\r\n    * deliveryHourEnd - Конечный час интервала доставки\r\n    * clientPhone - Телефон клиента\r\n    * id - Ид. заказа\r\n* Пагинация\r\n    * Поддерживается\r\n* Сортировка\r\n    * sort - Поле сортировки. Возможные значения createdAt, clientName, finishedAt, updatedAt, packedAt, status, interval, deliveryDate\r\n        * interval - включает сортировку по 2м полям, дате недели и часу начала интервала\r\n    * sortDirect - Порядок сортировки. asc или desc"
					},
					"response": []
				},
				{
					"name": "Order Items",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{url}}/api/v1/admin/orders/1/items",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"v1",
								"admin",
								"orders",
								"1",
								"items"
							]
						},
						"description": "# Получить список позиций заказа\r\n* Описание - Возвращаем список позиций заказа\r\n* Параметры\r\n    * orderId - Ид. заказа. Обязательное поле.\r\n* Результат - Все позиции заказа одним массивом\r\n* Пагинация и сортировка - Не поддерживаются"
					},
					"response": []
				},
				{
					"name": "OrderI payments",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{url}}/api/v1/admin/orders/1/payments",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"v1",
								"admin",
								"orders",
								"1",
								"payments"
							]
						},
						"description": "# Получить список позиций заказа\r\n* Описание - Возвращаем список позиций заказа\r\n* Параметры\r\n    * orderId - Ид. заказа. Обязательное поле.\r\n* Результат - Все позиции заказа одним массивом\r\n* Пагинация и сортировка - Не поддерживаются"
					},
					"response": []
				},
				{
					"name": "OrderI gifts",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{url}}/api/v1/admin/orders/1/gifts",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"v1",
								"admin",
								"orders",
								"1",
								"gifts"
							]
						},
						"description": "# Получить список позиций заказа\r\n* Описание - Возвращаем список позиций заказа\r\n* Параметры\r\n    * orderId - Ид. заказа. Обязательное поле.\r\n* Результат - Все позиции заказа одним массивом\r\n* Пагинация и сортировка - Не поддерживаются"
					},
					"response": []
				},
				{
					"name": "Update order",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "status",
									"value": "delivery",
									"type": "text"
								},
								{
									"key": "adminsComment",
									"value": "Комментарий админа",
									"type": "text"
								},
								{
									"key": "commentForClient",
									"value": "Ваш заказ удален",
									"type": "text"
								},
								{
									"key": "deliveryIntervalId",
									"value": "6",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{url}}/api/v1/admin/orders/36",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"v1",
								"admin",
								"orders",
								"36"
							]
						},
						"description": "# Обновление данных заказа\r\n* Обновляем то что можно обновить\r\n* Параметры\r\n    * status - Новые статус заказа\r\n    * adminsComment - Комментарий админа и для админов\r\n    * commentForClient - Комментарий для клиента\r\n    * deliveryIntervalId - Ид. нового интревала доставки. После обновление этого поля, поле deliveryDate обновиться."
					},
					"response": []
				},
				{
					"name": "Complete order",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "confirmSum",
									"value": "500",
									"type": "text",
									"disabled": true
								}
							]
						},
						"url": {
							"raw": "{{url}}/api/v1/admin/orders/142/complete",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"v1",
								"admin",
								"orders",
								"142",
								"complete"
							]
						},
						"description": "# Подтверждение выполнения заказа\n* Считаем заказа завершенным. Подтверждаем и проводим все оплаты. Если задана сумма подтверждения, то списываем только переданную сумму, остаток превращаем в позицию возврата. Если сумма подтверждения не задана, то получаем сумму реально закупленных товаров.\n* Параметры\n    * orderId - Задается в url адресе\n    * confirmSum - Сумма покупки. Может быть не задана."
					},
					"response": []
				},
				{
					"name": "Cancel order",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": []
						},
						"url": {
							"raw": "{{url}}/api/v1/admin/orders/1/cancel",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"v1",
								"admin",
								"orders",
								"1",
								"cancel"
							]
						},
						"description": "# Отмена заказа\n* Отменяем заказ и его оплату. Отменять можно заказы, которые еще не перешли в финальную стадию. Если пользователь оплачивал через плат. шлюз, то заморозка отменится.\n* Параметры\n    * orderId - Задается в url адресе"
					},
					"response": []
				},
				{
					"name": "Refund order",
					"request": {
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": []
						},
						"url": {
							"raw": "{{url}}/api/v1/admin/orders/135",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"v1",
								"admin",
								"orders",
								"135"
							]
						},
						"description": "# Отмена заказа и возврат всех средств\n* Когда заказ перешел в статус выполнен, его можно отменить и вернуть все средства клиенту.\n* Параметры\n    * orderId - Задается в url адресе"
					},
					"response": []
				},
				{
					"name": "Show order info",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{url}}/api/v1/admin/orders/50",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"v1",
								"admin",
								"orders",
								"50"
							]
						},
						"description": "# Возвращаем инфу об определенном заказе\r\n* Описание - Возвращаем список позиций заказа\r\n* Параметры\r\n    * orderId - Ид. заказа. Обязательное поле. Передается через параметры url"
					},
					"response": []
				}
			],
			"auth": {
				"type": "bearer",
				"bearer": [
					{
						"key": "token",
						"value": "{{adminToken}}",
						"type": "string"
					}
				]
			},
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "Packer boy",
			"item": [
				{
					"name": "Pack order",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{adminToken}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "force",
									"value": "false",
									"type": "text"
								},
								{
									"key": "items[0][id]",
									"value": "1",
									"type": "text"
								},
								{
									"key": "items[0][productId]",
									"value": "1",
									"type": "text"
								},
								{
									"key": "items[0][realUnits]",
									"value": "10",
									"type": "text"
								},
								{
									"key": "items[0][realPrice]",
									"value": "2",
									"type": "text"
								},
								{
									"key": "items[0][realTotal]",
									"value": "2",
									"type": "text"
								},
								{
									"key": "gifts[0][id]",
									"value": "1",
									"type": "text"
								},
								{
									"key": "gifts[0][realQty]",
									"value": "10",
									"type": "text"
								},
								{
									"key": "gifts[0][realTotalBonuses]",
									"value": "2",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{url}}/api/v1/admin/packer-boy/pack/1",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"v1",
								"admin",
								"packer-boy",
								"pack",
								"1"
							]
						},
						"description": "# Возвращаем список продуктов и подарков для закупки\r\n* Описание - Показыаем список продуктов и список подарков которые нужно закупить или подготовить в выбранную дату\r\n* Параметры\r\n    * date - Дата доставки\r\n    * startHour - Стартовый час времени доставки\r\n    * endHour - Конечный час интервала доставки\r\n    * orderStatus - Статус заказа\r\n* Результат\r\n    * products - Список продуктов для заказа\r\n    * gifts - Список подарков\r\n* Пагинация и сортировка\r\n    * Не поддерживается. Все должны выполняться на стороне клиента"
					},
					"response": []
				},
				{
					"name": "Unpack order",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{adminToken}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"url": {
							"raw": "{{url}}/api/v1/admin/packer-boy/unpack/144",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"v1",
								"admin",
								"packer-boy",
								"unpack",
								"144"
							]
						},
						"description": "# Возвращаем список продуктов и подарков для закупки\r\n* Описание - Показыаем список продуктов и список подарков которые нужно закупить или подготовить в выбранную дату\r\n* Параметры\r\n    * date - Дата доставки\r\n    * startHour - Стартовый час времени доставки\r\n    * endHour - Конечный час интервала доставки\r\n    * orderStatus - Статус заказа\r\n* Результат\r\n    * products - Список продуктов для заказа\r\n    * gifts - Список подарков\r\n* Пагинация и сортировка\r\n    * Не поддерживается. Все должны выполняться на стороне клиента"
					},
					"response": []
				}
			]
		},
		{
			"name": "OrderItem",
			"item": [
				{
					"name": "Show order item info",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{url}}/api/v1/admin/orders/items/127",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"v1",
								"admin",
								"orders",
								"items",
								"127"
							]
						},
						"description": "# Получение информации о позиции заказа\r\n* Параметры\r\n    * Ид. позиции заказа передается в параметре url"
					},
					"response": []
				},
				{
					"name": "Show gift info",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{url}}/api/v1/admin/orders/gifts/102",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"v1",
								"admin",
								"orders",
								"gifts",
								"102"
							]
						},
						"description": "# Получение информации о позиции с подарком в заказе\n* Параметры\n    * Ид. позиции подарка передается в параметре url"
					},
					"response": []
				},
				{
					"name": "Update order item info",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "realPrice",
									"value": "1",
									"type": "text"
								},
								{
									"key": "realTotal",
									"value": "222",
									"type": "text"
								},
								{
									"key": "realUnits",
									"value": "4",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{url}}/api/v1/admin/orders/items/22",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"v1",
								"admin",
								"orders",
								"items",
								"22"
							]
						},
						"description": "# Обновление информации о позиции заказа\r\n* Описание - Обновляем инфу о реальной цене, кол-ву и итогу\r\n* Параметры\r\n    * realPrice - Цена реально закупленных продуктов за ед. измеения\r\n    * realUnits - Кол-во реально закупленных продуктов. Измереятся не в qty, в ед. измерения. Например 100г или 250г.\r\n    * realTotal - Полная сумма закупленных продуктов"
					},
					"response": []
				},
				{
					"name": "Update order gift",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "realQty",
									"value": "1",
									"type": "text"
								},
								{
									"key": "realTotalBonuses",
									"value": "222",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{url}}/api/v1/admin/orders/gifts/20",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"v1",
								"admin",
								"orders",
								"gifts",
								"20"
							]
						},
						"description": "# Обновление информации о позиции подарка в заказе\n* Описание - Обновляем инфу о реальном кол-ве подарков и итоговую сумму бонусов, которая спишется с клиента\n* Параметры\n    * realQty - Реальное кол-во подарков\n    * realTotalBonuses - Кол-во бонусов которое спишется за подарок"
					},
					"response": []
				},
				{
					"name": "Mass update",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "items[0][id]",
									"value": "47",
									"type": "text"
								},
								{
									"key": "items[0][realTotal]",
									"value": "222",
									"type": "text"
								},
								{
									"key": "items[0][realUnits]",
									"value": "4",
									"type": "text"
								},
								{
									"key": "items[0][realPrice]",
									"value": "1",
									"type": "text"
								},
								{
									"key": "items[1][id]",
									"value": "48",
									"type": "text"
								},
								{
									"key": "items[1][realTotal]",
									"value": "1",
									"type": "text"
								},
								{
									"key": "items[1][realUnits]",
									"value": "1",
									"type": "text"
								},
								{
									"key": "items[1][realPrice]",
									"value": "2",
									"type": "text"
								},
								{
									"key": "gifts[0][id]",
									"value": "102",
									"type": "text"
								},
								{
									"key": "gifts[0][realQty]",
									"value": "12",
									"type": "text"
								},
								{
									"key": "gifts[0][realTotalBonuses]",
									"value": "1",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{url}}/api/v1/admin/orders/items",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"v1",
								"admin",
								"orders",
								"items"
							]
						},
						"description": "# Обновление информации о позицииях заказа\n* Описание - Обновляем инфу о реальной цене товара, кол-ву и итогу за товарную позициию. Обновляем данные по реальному кол-во и реальной сумме бонусов, которые спишутся со счета клиента за подарки.\n* Параметры\n    * id - Ид. позиции\n    * realPrice - Цена реально закупленных продуктов за ед. измеения\n    * realUnits - Кол-во реально закупленных продуктов. Измереятся не в qty, в ед. измерения. Например 100г или 250г.\n    * realTotal - Полная сумма закупленных продуктов"
					},
					"response": []
				},
				{
					"name": "Cancel order item",
					"request": {
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "realPrice",
									"value": "1",
									"type": "text"
								},
								{
									"key": "realTotal",
									"value": "222",
									"type": "text"
								},
								{
									"key": "realQty",
									"value": "3",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{url}}/api/v1/admin/orders/items/127",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"v1",
								"admin",
								"orders",
								"items",
								"127"
							]
						},
						"description": "# Обновление информации о позиции заказа\r\n* Удаление строки заказа\r\n    * itemId - передается в url адресе"
					},
					"response": []
				},
				{
					"name": "Cancel order gift",
					"request": {
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "realPrice",
									"value": "1",
									"type": "text"
								},
								{
									"key": "realTotal",
									"value": "222",
									"type": "text"
								},
								{
									"key": "realQty",
									"value": "3",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{url}}/api/v1/admin/orders/gifts/110",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"v1",
								"admin",
								"orders",
								"gifts",
								"110"
							]
						},
						"description": "# Обновление информации о позиции заказа\r\n* Удаление строки заказа\r\n    * itemId - передается в url адресе"
					},
					"response": []
				}
			],
			"auth": {
				"type": "bearer",
				"bearer": [
					{
						"key": "token",
						"value": "{{adminToken}}",
						"type": "string"
					}
				]
			}
		},
		{
			"name": "Purchaser boy",
			"item": [
				{
					"name": "Show products",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{adminToken}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{url}}/api/v1/admin/purchaser-boy?date=07.08.2021&orderStatus=placed",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"v1",
								"admin",
								"purchaser-boy"
							],
							"query": [
								{
									"key": "date",
									"value": "07.08.2021"
								},
								{
									"key": "startHour",
									"value": "1",
									"disabled": true
								},
								{
									"key": "endHour",
									"value": "11",
									"disabled": true
								},
								{
									"key": "orderStatus",
									"value": "placed"
								}
							]
						},
						"description": "# Возвращаем список продуктов и подарков для закупки\r\n* Описание - Показыаем список продуктов и список подарков которые нужно закупить или подготовить в выбранную дату\r\n* Параметры\r\n    * date - Дата доставки\r\n    * startHour - Стартовый час времени доставки\r\n    * endHour - Конечный час интервала доставки\r\n    * orderStatus - Статус заказа\r\n* Результат\r\n    * products - Список продуктов для заказа\r\n    * gifts - Список подарков\r\n* Пагинация и сортировка\r\n    * Не поддерживается. Все должны выполняться на стороне клиента"
					},
					"response": []
				},
				{
					"name": "Show products As Excel",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{adminToken}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{url}}/api/v1/admin/purchaser-boy-as-excel?date=2020-11-12",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"v1",
								"admin",
								"purchaser-boy-as-excel"
							],
							"query": [
								{
									"key": "date",
									"value": "2020-11-12"
								}
							]
						},
						"description": "# Список продуктов для закупки\r\n* Аналогично АПИ Show products, только результат возвращаем в формате Excel"
					},
					"response": []
				}
			],
			"auth": {
				"type": "bearer",
				"bearer": [
					{
						"key": "token",
						"value": "{{adminToken}}",
						"type": "string"
					}
				]
			}
		},
		{
			"name": "Images DEPRICATED",
			"item": [
				{
					"name": "updateImages",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{adminToken}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "urlencoded",
							"urlencoded": []
						},
						"url": {
							"raw": "{{url}}/api/v1/admin/images/catalog_images/1/update?data[0][id]=4&data[0][order]=4",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"v1",
								"admin",
								"images",
								"catalog_images",
								"1",
								"update"
							],
							"query": [
								{
									"key": "data[0][id]",
									"value": "4"
								},
								{
									"key": "data[0][order]",
									"value": "4"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "uploadImages",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{adminToken}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "images[]",
									"type": "file",
									"src": "/E:/Downloads/useravatar.png"
								}
							]
						},
						"url": {
							"raw": "{{url}}/api/v1/admin/images/catalog_images/1/upload",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"v1",
								"admin",
								"images",
								"catalog_images",
								"1",
								"upload"
							]
						}
					},
					"response": []
				},
				{
					"name": "getImages",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "images[]",
									"type": "file",
									"src": "/E:/Downloads/useravatar.png"
								}
							]
						},
						"url": {
							"raw": "{{url}}/api/v1/client/images/slider/11",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"v1",
								"client",
								"images",
								"slider",
								"11"
							]
						}
					},
					"response": []
				},
				{
					"name": "deleteImages",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{adminToken}}",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "urlencoded",
							"urlencoded": []
						},
						"url": {
							"raw": "{{url}}/api/v1/admin/images/catalog_images/1/destroy?ids[]=5&ids[]=6",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"v1",
								"admin",
								"images",
								"catalog_images",
								"1",
								"destroy"
							],
							"query": [
								{
									"key": "ids[]",
									"value": "5"
								},
								{
									"key": "ids[]",
									"value": "6"
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "☎️ Mobile",
			"item": [
				{
					"name": "Client",
					"item": [
						{
							"name": "Login. Step 1.",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"200 and success\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.success).equal(true);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "{{url}}/api/v1/client/register/request?phone=+7 999 999-99-99",
									"host": [
										"{{url}}"
									],
									"path": [
										"api",
										"v1",
										"client",
										"register",
										"request"
									],
									"query": [
										{
											"key": "referral",
											"value": "",
											"description": "Referral code",
											"disabled": true
										},
										{
											"key": "phone",
											"value": "+7 999 999-99-99"
										}
									]
								},
								"description": "# Вход. Шаг 1.\r\n* Описание\r\n    * Для входа пользователь вводит номер телефона в международном формате +7 999 999-99-99 Затем на этот номер отправляется СМС с кодом подтверждения. На втором шаге пользователь повторно вводит свой номер и код подтверждения.\r\n* Параметры\r\n    * phone - Номер телефона в международном формате\r\n    * referal - Реферальный код"
							},
							"response": []
						},
						{
							"name": "Login. Step 2.",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Exists token of client\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.success).to.equal(true);\r",
											"    pm.expect(jsonData.result).to.have.property('token');\r",
											"    if(jsonData.success) {\r",
											"        pm.globals.set(\"lastClientToken\", jsonData.result.token);\r",
											"    }\r",
											"});\r",
											"\r",
											"var jsonData = JSON.parse(responseBody);\r",
											"postman.setEnvironmentVariable(\"clientToken\", jsonData.result.token);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "{{url}}/api/v1/client/register/verify?code=11111&platform=iOS&phone=+7 999 999 99 99",
									"host": [
										"{{url}}"
									],
									"path": [
										"api",
										"v1",
										"client",
										"register",
										"verify"
									],
									"query": [
										{
											"key": "code",
											"value": "11111"
										},
										{
											"key": "platform",
											"value": "iOS",
											"description": "iOS / Android / Web"
										},
										{
											"key": "phone",
											"value": "+7 999 999 99 99"
										}
									]
								},
								"description": "# Вход. Шаг 2. Завершающий.\r\n* Описание\r\n    * На этом шаге пользователь вводит код, который ему пришел по СМС, повторно свой номер телефона и платформу с которой он осущесьвляет вход\r\n* Параметры\r\n    * phone - Номер телефона. В том же формате, что и на первом шаге.\r\n    * code - 5и значный код.\r\n    * platform - Платформа ( iOS, Android, na)\r\n        * na - Платформа не определена\r\n        * iOS и Android - думаю понятно"
							},
							"response": []
						},
						{
							"name": "Get client info",
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{clientToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{url}}/api/v1/client",
									"host": [
										"{{url}}"
									],
									"path": [
										"api",
										"v1",
										"client"
									]
								},
								"description": "# Получаем всю информацию о клиенте\r\n* Описание\r\n    * Возвращаем всю информацию о клиенте, которая у нас есть.\r\n* Результат\r\n    * Список всех полей клиента\r\n    * Список адресов\r\n* Параметры\r\n    * Параметров нет\r\n    * Тек. пользователь определяется по переданному токену"
							},
							"response": []
						},
						{
							"name": "Update client",
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{clientToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "name",
											"value": "Иванов Иван",
											"type": "text"
										},
										{
											"key": "email",
											"value": "aaa@aaa.ru",
											"type": "text"
										},
										{
											"key": "allowMailing",
											"value": "true",
											"type": "text",
											"disabled": true
										},
										{
											"key": "birthday",
											"value": "11.11.2011",
											"type": "text",
											"disabled": true
										},
										{
											"key": "avatar",
											"type": "file",
											"src": "/C:/Users/Иван/Pictures/11313208_103548969985147_894888127_n.jpg"
										}
									]
								},
								"url": {
									"raw": "{{url}}/api/v1/client",
									"host": [
										"{{url}}"
									],
									"path": [
										"api",
										"v1",
										"client"
									]
								},
								"description": "# Обновление данных клиента\r\n* Описание\r\n    * Меняем данные клиента. См. описание ЛК.\r\n    * Параметры могут быть пустыми - это значит, что клиент стер какой-то параметр\r\n* Параметры\r\n    * name - ФИО клиента, используется всего одно поле\r\n    * email - email адрес, на уникаьность не проверяется\r\n    * allowMailing - подписка на рассылку\r\n    * birthday - Дата рождения. Формат даты передается в настройках.\r\n    * avatar - Аватрака пользователя"
							},
							"response": []
						},
						{
							"name": "Update birthday",
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{clientToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "birthday",
											"value": "11.11.2011",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{url}}/api/v1/client/birthday",
									"host": [
										"{{url}}"
									],
									"path": [
										"api",
										"v1",
										"client",
										"birthday"
									]
								},
								"description": "# Обновление данных клиента\r\n* Описание\r\n    * Меняем данные клиента. См. описание ЛК.\r\n    * Параметры могут быть пустыми - это значит, что клиент стер какой-то параметр\r\n* Параметры\r\n    * name - ФИО клиента, используется всего одно поле\r\n    * email - email адрес, на уникаьность не проверяется\r\n    * allowMailing - подписка на рассылку\r\n    * birthday - Дата рождения. Формат даты передается в настройках.\r\n    * avatar - Аватрака пользователя"
							},
							"response": []
						},
						{
							"name": "Delete client avatar",
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{clientToken}}",
											"type": "string"
										}
									]
								},
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{url}}/api/v1/client/avatar",
									"host": [
										"{{url}}"
									],
									"path": [
										"api",
										"v1",
										"client",
										"avatar"
									]
								},
								"description": "# Удаление аватрки клиента"
							},
							"response": []
						}
					]
				},
				{
					"name": "Addresses",
					"item": [
						{
							"name": "Add address",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Exists id of added address\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.result.id).to.greaterThan(0);\r",
											"    pm.expect(jsonData.success).to.equal(true);\r",
											"    if(jsonData.success) {\r",
											"        pm.globals.set(\"lastAddedClientAddressId\", jsonData.result.id);\r",
											"    }\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{clientToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "name",
											"value": "🏰 Мой дом",
											"type": "text"
										},
										{
											"key": "city",
											"value": "Великий Новгород",
											"type": "text"
										},
										{
											"key": "street",
											"value": "ул. Зелинского",
											"type": "text"
										},
										{
											"key": "house",
											"value": "",
											"type": "text",
											"disabled": true
										},
										{
											"key": "building",
											"value": "",
											"type": "text"
										},
										{
											"key": "entrance",
											"value": "",
											"type": "text"
										},
										{
											"key": "floor",
											"value": "5",
											"type": "text"
										},
										{
											"key": "doorphone",
											"value": "Нет",
											"type": "text"
										},
										{
											"key": "appt",
											"value": "пятьдест четвертая квартира",
											"type": "text"
										},
										{
											"key": "lat",
											"value": "1.0",
											"type": "text"
										},
										{
											"key": "lon",
											"value": "-1.0",
											"type": "text"
										},
										{
											"key": "comment",
											"value": "Не звонить!",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{url}}/api/v1/client/addresses",
									"host": [
										"{{url}}"
									],
									"path": [
										"api",
										"v1",
										"client",
										"addresses"
									]
								},
								"description": "# Добавление адреса\r\n* Параметры\r\n    * name - Название адреса. Обязательное.\r\n    * city - Город. Обязательное.\r\n    * street - Улица. Может применяться для ввода полного адреса. Обязательное.\r\n    * house - Номер дома\r\n    * building - Строение\r\n    * entrance - Подъезд/Парадная/Вход\r\n    * floor - Этаж\r\n    * doorphone - Код двери\r\n    * appt - Апартаменты. Номер квартиры.\r\n    * lat - Широта. Вещественное число, разделитель **.** Может быть отрицательным. Обязательное.\r\n    * lon - Долгота. Вещественное число, разделитель **.** Может быть отрицательным. Обязательное.\r\n    * comment - Комментарий к адресу."
							},
							"response": []
						},
						{
							"name": "All addresses",
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{clientToken}}",
											"type": "string"
										},
										{
											"key": "password",
											"value": "{{clientToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{url}}/api/v1/client/addresses",
									"host": [
										"{{url}}"
									],
									"path": [
										"api",
										"v1",
										"client",
										"addresses"
									]
								},
								"description": "# Получить список всех адресов клиента\r\n* Параметры - нет\r\n* Результат\r\n    * Выводим список адресов отсортированных по дате добавления в обратном порядке.\r\n    * Результат - это массив с адресами. Кроме основных параметров адреса, перечисленных в АПИ Add address, выводятся и данные по району доставки. Если адрес попадает в определенный район доставки, то данные по району тоже выводятся. Поля, относящиеся к району доставки снабжены префикосм **da** Поле **isDelivery** обозначает, если доставка в этот район."
							},
							"response": []
						},
						{
							"name": "Get address",
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{clientToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{url}}/api/v1/client/addresses/{{lastAddedClientAddressId}}",
									"host": [
										"{{url}}"
									],
									"path": [
										"api",
										"v1",
										"client",
										"addresses",
										"{{lastAddedClientAddressId}}"
									]
								},
								"description": "# Получение информации об одном адресе\r\n* Параметры\r\n    * ИД. адреса - передается в параметрах URL\r\n* Результат\r\n    * Данные адреса. Все значения, даже не заполненные."
							},
							"response": []
						},
						{
							"name": "Delete address",
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{clientToken}}",
											"type": "string"
										}
									]
								},
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{url}}/api/v1/client/addresses/{{lastAddedClientAddressId}}",
									"host": [
										"{{url}}"
									],
									"path": [
										"api",
										"v1",
										"client",
										"addresses",
										"{{lastAddedClientAddressId}}"
									]
								},
								"description": "# Удаление адреса\r\n* Параметры\r\n    * ИД. адреса - передается в параметрах URL"
							},
							"response": []
						}
					]
				},
				{
					"name": "Catalog",
					"item": [
						{
							"name": "Catalog",
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "https://biovillage.ru/api/v1/catalog?name=Клубника&page=1&perPage=100",
									"protocol": "https",
									"host": [
										"biovillage",
										"ru"
									],
									"path": [
										"api",
										"v1",
										"catalog"
									],
									"query": [
										{
											"key": "name",
											"value": "Клубника"
										},
										{
											"key": "page",
											"value": "1"
										},
										{
											"key": "perPage",
											"value": "100"
										},
										{
											"key": "groupId",
											"value": "1",
											"disabled": true
										},
										{
											"key": "tags[]",
											"value": "1",
											"disabled": true
										},
										{
											"key": "tags[]",
											"value": "2",
											"disabled": true
										}
									]
								},
								"description": "# Поиск продуктов\r\n* Авторизация\r\n    * Не требуется. АПИ доступно всем пользователям\r\n* Параметры\r\n    * name - Поиск по названию группы или продукта или по частичному названию\r\n    * page - Тек. номер страницы\r\n    * perPage - Число продуктов на одной странце.\r\n    * groupId - Ид. группы в которой искать товары. Если параметр передан, то группы не возвращаются.\r\n    * tags[] - Массив с идентификаторами тегов. Теги применяеться для поиска по товарам, а также по промо-товарам.\r\n* Пагинация\r\n    * Поддерживается только для продуктов. Реализуется при помощи 2х параметров page и perPage\r\n* Сортировка\r\n    * Выставляется в беке\r\n* Результат\r\n    * groups - Список найденных групп. Поиск групп выполняется если передан параметр name и не задан groupId\r\n    * products - Список найденных продуктов\r\n    * prodPager - Данные пагинации\r\n    * promo - 100 первых промо товаров"
							},
							"response": []
						},
						{
							"name": "Promo",
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{clientToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "https://biovillagedev.ru/api/v1/catalog/promo?page=1&perPage=1000",
									"protocol": "https",
									"host": [
										"biovillagedev",
										"ru"
									],
									"path": [
										"api",
										"v1",
										"catalog",
										"promo"
									],
									"query": [
										{
											"key": "page",
											"value": "1"
										},
										{
											"key": "perPage",
											"value": "1000"
										}
									]
								},
								"description": "# Получаем список промо товаров\r\n* Описание - Поиск только акционных товаров. Копия общего поиска товаров, как по параметрам, так и по результату.\r\n* Параметры\r\n    * name - Полное или частичное имя товара\r\n    * tags - Массив тегов для поиска\r\n    * page - Тек. страница\r\n    * perPage - Число элементов на странице\r\n    * sort - Поле сортировки. Возможные значения order или name\r\n    * sortDirect - Направление сортировки asс или desc\r\n* Результат\r\n    * Идентичен"
							},
							"response": []
						}
					]
				},
				{
					"name": "Orders",
					"item": [
						{
							"name": "Create order - CASH",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "deliveryIntervalId",
											"value": "1",
											"type": "text"
										},
										{
											"key": "addressId",
											"value": "1",
											"type": "text"
										},
										{
											"key": "paymentPrimaryMethod",
											"value": "cash",
											"type": "text"
										},
										{
											"key": "products[0][id]",
											"value": "1",
											"type": "text"
										},
										{
											"key": "products[0][qty]",
											"value": "1",
											"type": "text"
										},
										{
											"key": "products[0][price]",
											"value": "10000",
											"type": "text"
										},
										{
											"key": "products[0][total]",
											"value": "10000",
											"type": "text"
										},
										{
											"key": "products[1][id]",
											"value": "2",
											"type": "text"
										},
										{
											"key": "products[1][qty]",
											"value": "1",
											"type": "text"
										},
										{
											"key": "products[1][price]",
											"value": "10000",
											"type": "text"
										},
										{
											"key": "products[1][total]",
											"value": "10000",
											"type": "text"
										},
										{
											"key": "productsSum",
											"value": "10000",
											"type": "text"
										},
										{
											"key": "deliverySum",
											"value": "1",
											"type": "text"
										},
										{
											"key": "total",
											"value": "10001",
											"type": "text"
										},
										{
											"key": "gifts[0][id]",
											"value": "2",
											"type": "text",
											"disabled": true
										},
										{
											"key": "gifts[0][qty]",
											"value": "1",
											"type": "text",
											"disabled": true
										},
										{
											"key": "gifts[0][total]",
											"value": "200",
											"type": "text",
											"disabled": true
										},
										{
											"key": "gifts[0][price]",
											"value": "200",
											"type": "text",
											"disabled": true
										},
										{
											"key": "giftBonuses",
											"value": "0",
											"type": "text"
										},
										{
											"key": "clientsComment",
											"value": "Комментарий клиента",
											"type": "text"
										},
										{
											"key": "promoCode",
											"value": "123",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{url}}/api/v1/client/orders",
									"host": [
										"{{url}}"
									],
									"path": [
										"api",
										"v1",
										"client",
										"orders"
									]
								},
								"description": "# Создание заказа, которые оплачивается наличными\r\n* Параметры\r\n    * deliveryIntervalId - Ид. интервала доставки\r\n    * addressId - Ид. адреса доставки\r\n    * clientsComment - Комментарий клиента\r\n    * promoCode - Промокод для заказа\r\n    * products - Массив содержащий список продуктов\r\n        * id - Ид. продукта\r\n        * qty - Кол-во продукта\r\n        * price - Цена за мин. кол-во продукта\r\n        * total - Полная цена покупки продукта. Логика расчета qty * price\r\n    * paymentPrimaryType - Тип основного способа оплаты. Возможные значения:\r\n        * cash - Наличные\r\n        * ccard - Картой курьеру\r\n        * gpay - Google pay\r\n        * apay - Apple pay\r\n        * bonus - Оплата бонусами всего заказа\r\n    * paymentPrimaryData - Данные оплаты из плат. системы. Используется только для GooglePay и ApplePay\r\n    * productsSum - Сумма покупки. Считаются только продукты. Доставка не учитывается.\r\n    * deliverySum - Сумма доставки. Если сумма покупки больше мин. суммы доставки, то указываем 0\r\n    * total - Итоговая сумма. Сумма продуктов - Сумма скидки + Сумма доставки\r\n    * giftBonuses - Сколько бонусов потрачено на подарки\r\n    * gifts - Массив выбранных подарков\r\n        * id - Ид. подарка\r\n        * qty - Число выбранных подарков\r\n        * price - Сколько бонусов спишется за один подарок\r\n        * total - Сколько бонусов спишется за все выбранные подарки"
							},
							"response": []
						},
						{
							"name": "Create order - FULL TEST",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Exists id of order\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.result.id).to.greaterThan(0);\r",
											"    pm.expect(jsonData.success).to.equal(true);\r",
											"    if(jsonData.success) {\r",
											"        pm.globals.set(\"lastCreatedOrderId\", jsonData.result.id);\r",
											"    }\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"//\r",
											"// Вспомогательные ф-ии\r",
											"//\r",
											"function checkResp(resp, err, errMsg) {\r",
											"    if (err) {\r",
											"        console.log('Возникла ошибка HTTP');\r",
											"        throw Error('Ошибка HTTP');\r",
											"    }\r",
											"\r",
											"    let j = resp.json();\r",
											"    if (!j['success']) {\r",
											"        console.log(errMsg);\r",
											"        console.log(j);\r",
											"        throw Error('Ошибка');\r",
											"    }\r",
											"}\r",
											"\r",
											"function getRandomString() {\r",
											"    return Math.random().toString(36).substring(2);\r",
											"}\r",
											"\r",
											"//\r",
											"// Важные переменные, доступы и тд.\r",
											"//\r",
											"let url = pm.environment.get('url');\r",
											"let adminToken = \"Bearer \" + pm.environment.get('adminToken');\r",
											"let clientToken = \"Bearer \" + pm.environment.get('clientToken');\r",
											"\r",
											"//\r",
											"// Инициализация глоб. переменных\r",
											"//\r",
											"pm.globals.set('deliverySum', 1000);\r",
											"pm.globals.set('deliveryFreeSum', 3900);\r",
											"pm.globals.set('unitStep', 10);\r",
											"pm.globals.set('factor', 1000);\r",
											"pm.globals.set('productPrice', 550);\r",
											"pm.globals.set('productQty', 2);\r",
											"pm.globals.set('productBonuses', '0' );;\r",
											"pm.globals.set('productPromo', '');\r",
											"pm.globals.set('giftPrice', 10);\r",
											"pm.globals.set('giftQty', 1);\r",
											"\r",
											"// Разбираемся с итоговой суммой товаров, подарков и доставки\r",
											"let prodTotal = pm.globals.get('productQty') * pm.globals.get('productPrice');\r",
											"let deliveryFreeSum = pm.globals.get('deliveryFreeSum');\r",
											"let orderDeliverySum = 0\r",
											"if (prodTotal < deliveryFreeSum) {\r",
											"    orderDeliverySum = pm.globals.get('deliverySum');\r",
											"}\r",
											"pm.globals.set('orderDeliverySum', orderDeliverySum)\r",
											"pm.globals.set('productTotal', prodTotal);\r",
											"pm.globals.set('total', prodTotal + orderDeliverySum)\r",
											"\r",
											"let giftTotal = pm.globals.get('giftQty') * pm.globals.get('giftPrice');\r",
											"pm.globals.set('giftTotal', giftTotal);\r",
											"pm.globals.set('giftBonuses', giftTotal);\r",
											"\r",
											"// Получаем информацию о тек. клиенте\r",
											"function getCurrentClientParams() {\r",
											"    return {\r",
											"        method: 'GET',\r",
											"        url: url + '/api/v1/client',\r",
											"        header: {\r",
											"            'Authorization': clientToken,\r",
											"        }\r",
											"    }\r",
											"}\r",
											"\r",
											"// Начисление тек. клиенту бонусных баллов\r",
											"function getUpdateBonusesParams() {\r",
											"    return {\r",
											"        method: 'POST',\r",
											"        url: url + '/api/v1/admin/clients/' + pm.globals.get('currentClientId') + \"/bonuses\",\r",
											"        header: {\r",
											"            'Authorization': adminToken,\r",
											"            'Content-Type': 'multipart/form-data',\r",
											"        },\r",
											"        body: {\r",
											"            mode: 'formdata',\r",
											"            formdata: [\r",
											"                { key: 'bonuses', value: pm.globals.get('giftTotal')  }\r",
											"            ]\r",
											"        }\r",
											"    }\r",
											"}\r",
											"\r",
											"// Создание зоны доставки\r",
											"function getCreateDeliverAreaParams() {\r",
											"    return {\r",
											"        method: 'POST',\r",
											"        url: url + '/api/v1/admin/da',\r",
											"        header: {\r",
											"            'Authorization': adminToken,\r",
											"            'Content-Type': 'multipart/form-data',\r",
											"        },\r",
											"        body: {\r",
											"            mode: 'formdata',\r",
											"            formdata: [\r",
											"                { key: 'names[0]', value: 'Район в МСК ' },\r",
											"                { key: 'colors[0]', value: '#d7d7d7' },\r",
											"                { key: 'polygons[0]', value: '((55.7367046,37.5206105),(55.7127293,37.3819081),(55.639165,37.4533192),(55.7096347,37.5865284),(55.7367046,37.5206105))' },\r",
											"                { key: 'names[1]', value: 'Может в МСК, а может и нет' },\r",
											"                { key: 'colors[1]', value: '#f1f2f3' },\r",
											"                { key: 'polygons[1]', value: '((59.1,38.5206105),(59.7127293,38.3819081),(59.639165,38.4533192),(59.7096347,38.5865284),(59.7367046,38.5206111))' },\r",
											"                { key: 'prices[0]', value: pm.globals.get('deliverySum') },\r",
											"                { key: 'prices[1]', value: '2' },\r",
											"                { key: 'actives[0]', value: 'true' },\r",
											"                { key: 'actives[1]', value: 'true' },\r",
											"                { key: 'deliveryFreeSums[0]', value: pm.globals.get('deliveryFreeSum') },\r",
											"                { key: 'deliveryFreeSums[1]', value: '200' }\r",
											"            ]\r",
											"        }\r",
											"    };\r",
											"};\r",
											"\r",
											"// Параметры для создание адреса клиента\r",
											"function getCreateClientAddressParams() {\r",
											"    return {\r",
											"        method: 'POST',\r",
											"        url: url + '/api/v1/client/addresses',\r",
											"        header: {\r",
											"            'Authorization': clientToken,\r",
											"            'Content-Type': 'multipart/form-data',\r",
											"        },\r",
											"        body: {\r",
											"            mode: 'formdata',\r",
											"            formdata: [\r",
											"                { key: \"name\", value: \"🏰 Мой дом \" + getRandomString() },\r",
											"                { key: \"city\", value: \"Москва\" },\r",
											"                { key: \"street\", value: \"просп. Мичуринский \" + getRandomString() },\r",
											"                { key: \"building\", value: \"4ф\" + getRandomString() },\r",
											"                { key: \"entrance\", value: \"2д\" + getRandomString() },\r",
											"                { key: \"floor\", value: \"45\" },\r",
											"                { key: \"doorphone\", value: \"Нет\" + getRandomString() },\r",
											"                { key: \"appt\", value: \"пятьдест четвертая квартира\" + getRandomString() },\r",
											"                { key: \"lat\", value: \"55.713\" }, ,\r",
											"                { key: \"lon\", value: \"37.52796\" },\r",
											"                { key: \"comment\", value: \"Не звонить! Спят дети.\" + getRandomString() },\r",
											"            ]\r",
											"        }\r",
											"    }\r",
											"};\r",
											"\r",
											"// Параметры для создания группы товаров\r",
											"function getGroupParams() {\r",
											"    return {\r",
											"        method: 'POST',\r",
											"        url: url + '/api/v1/admin/groups',\r",
											"        header: {\r",
											"            'Authorization': adminToken,\r",
											"            'Content-Type': 'multipart/form-data',\r",
											"        },\r",
											"        body: {\r",
											"            mode: 'formdata',\r",
											"            formdata: [\r",
											"                { key: \"active\", value: \"true\" },\r",
											"                { key: \"name\", value: \"Бананs \" + getRandomString() },\r",
											"                { key: \"order\", value: \"1\" },\r",
											"                { key: \"bgColor\", value: \"#D3D3D3\" },\r",
											"                // Картинки не отправляются { key: \"image\", value: \"asd\"},\r",
											"            ]\r",
											"        }\r",
											"    }\r",
											"}\r",
											"\r",
											"// Параметры для создания продукта\r",
											"function getProductParams() {\r",
											"    return {\r",
											"        method: 'POST',\r",
											"        url: url + '/api/v1/admin/products',\r",
											"        header: {\r",
											"            'Authorization': adminToken,\r",
											"            'Content-Type': 'multipart/form-data',\r",
											"        },\r",
											"        body: {\r",
											"            mode: 'formdata',\r",
											"            formdata: [\r",
											"                { key: \"active\", value: \"true\" },\r",
											"                { key: \"name\", value: \"Бананан \" + getRandomString() },\r",
											"                { key: \"description\", value: \"Большой и красивый\" },\r",
											"                // { key: \"image\", value: fileInput.files[0], value: \"/C:/Users/Иван/Pictures/2019-01-28_182632.png\"},\r",
											"                { key: \"unitId\", value: pm.globals.get('lastCreatedUnitId') },\r",
											"                { key: \"unitStep\", value: pm.globals.get('unitStep') },\r",
											"                { key: \"price\", value: pm.globals.get('productPrice') },\r",
											"                { key: \"bonusesPercentage\", value: pm.globals.get('productBonuses') },\r",
											"                { key: \"groupId\", value: pm.globals.get('lastCreatedGroupId') },\r",
											"                { key: \"tags[]\", value: pm.globals.get('lastCreatedTagId') },\r",
											"                { key: \"promotion\", value: pm.globals.get('productPromo') },\r",
											"                { key: \"order\", value: \"1\" },\r",
											"                { key: \"composition\", value: \"Эктоплазма\" },\r",
											"                { key: \"shelfLife\", value: \"Хранить в банках.\" },\r",
											"                { key: \"nutrition\", value: \"Молекул\" },\r",
											"                { key: \"netCostPerStep\", value: 1000 },\r",
											"            ]\r",
											"        }\r",
											"    }\r",
											"};\r",
											"\r",
											"// Параметры для создание ед. измерения\r",
											"function getCreateUnitParams() {\r",
											"    return {\r",
											"        method: 'POST',\r",
											"        url: url + '/api/v1/admin/units',\r",
											"        header: {\r",
											"            'Authorization': adminToken,\r",
											"            'Content-Type': 'multipart/form-data',\r",
											"        },\r",
											"        body: {\r",
											"            mode: 'formdata',\r",
											"            formdata: [\r",
											"                { key: \"fullName\", value: \"Единица \" + getRandomString() },\r",
											"                { key: \"shortName\", value: \"Ед \" + getRandomString() },\r",
											"                { key: \"step\", value: pm.globals.get('unitStep') },\r",
											"                { key: \"shortDerName\", value: \"Ед производная \" },\r",
											"                { key: \"factor\", value: pm.globals.get('factor') }\r",
											"            ]\r",
											"        }\r",
											"    }\r",
											"};\r",
											"\r",
											"// Параметры для создания тега\r",
											"function getCreateTagParams() {\r",
											"    return {\r",
											"        method: 'POST',\r",
											"        url: url + '/api/v1/admin/tags',\r",
											"        header: {\r",
											"            'Authorization': adminToken,\r",
											"            'Content-Type': 'multipart/form-data',\r",
											"        },\r",
											"        body: {\r",
											"            mode: 'formdata',\r",
											"            formdata: [\r",
											"                { key: \"name\", value: \"Тег\" + getRandomString() },\r",
											"                { key: \"order\", value: 1 },\r",
											"                { key: \"active\", value: 'true' }\r",
											"            ]\r",
											"        }\r",
											"    }\r",
											"};\r",
											"\r",
											"// Параметры для создания подарка\r",
											"function getCreateGiftParams() {\r",
											"    return {\r",
											"        method: 'POST',\r",
											"        url: url + '/api/v1/admin/gifts',\r",
											"        header: {\r",
											"            'Authorization': adminToken,\r",
											"            'Content-Type': 'multipart/form-data',\r",
											"        },\r",
											"        body: {\r",
											"            mode: 'formdata',\r",
											"            formdata: [\r",
											"                { key: \"name\", value: \"Подарок\" + getRandomString() },\r",
											"                { key: \"order\", value: \"100\" },\r",
											"                { key: \"active\", value: \"true\" },\r",
											"                { key: \"description\", value: \"Игрушка в форме слоника\" + getRandomString() },\r",
											"                { key: \"composition\", value: \"Китайский пот и слезы\" },\r",
											"                { key: \"shelfLife\", value: \"Хранить в святом месте\" },\r",
											"                { key: \"price\", value: pm.globals.get('giftPrice') },\r",
											"            ]\r",
											"        }\r",
											"    }\r",
											"}\r",
											"\r",
											"// Параметры для создания интервала доставки\r",
											"function getCreateDeliveryIntervalParams() {\r",
											"    return {\r",
											"        method: 'POST',\r",
											"        url: url + '/api/v1/admin/di',\r",
											"        header: {\r",
											"            'Authorization': adminToken,\r",
											"            'Content-Type': 'multipart/form-data',\r",
											"        },\r",
											"        body: {\r",
											"            mode: 'formdata',\r",
											"            formdata: [\r",
											"                { key: \"dayOfWeek\", value: \"6\" },\r",
											"                { key: \"startHour\", value: \"1\" },\r",
											"                { key: \"startMinute\", value: \"0\" },\r",
											"                { key: \"endHour\", value: \"2\" },\r",
											"                { key: \"endMinute\", value: \"1\" },\r",
											"                { key: \"active\", value: \"true\" },\r",
											"            ]\r",
											"        }\r",
											"    }\r",
											"}\r",
											"\r",
											"//\r",
											"// Создание всех необходимых сущностей для дальнейшего создания заказа в Request\r",
											"//\r",
											"\r",
											"// Получаем ид. текущего клиента\r",
											"pm.sendRequest(getCurrentClientParams(), function(err, response) {\r",
											"    checkResp(response, err, 'Не удалось получить информацию о тек. клиенте');\r",
											"    pm.globals.set('currentClientId', response.json().result.id);\r",
											"\r",
											"    // Добавляем тек. киенту бонусов\r",
											"    pm.sendRequest(getUpdateBonusesParams(), function(err, response) {\r",
											"        // Группа товаров\r",
											"        pm.sendRequest(getGroupParams(), function (err, response) {\r",
											"            checkResp(response, err, 'Не удалось создать группу');\r",
											"            pm.globals.set('lastCreatedGroupId', response.json().result.id);\r",
											"\r",
											"            // Ед. измерения\r",
											"            pm.sendRequest(getCreateUnitParams(), function (err, response) {\r",
											"                checkResp(response, err, 'Не смогли создать ед. измерения');\r",
											"                pm.globals.set('lastCreatedUnitId', response.json().result.id);\r",
											"\r",
											"                // Тег\r",
											"                pm.sendRequest(getCreateTagParams(), function (err, response) {\r",
											"                    checkResp(response, err, 'Не смогли создать тег');\r",
											"                    pm.globals.set('lastCreatedTagId', response.json().result.id);\r",
											"\r",
											"                    // Подарок\r",
											"                    pm.sendRequest(getCreateGiftParams(), function (err, response) {\r",
											"                        checkResp(response, err, 'Не смогли создать подарок');\r",
											"                        pm.globals.set('lastCreatedGiftId', response.json().result.id);\r",
											"\r",
											"                        // Товар\r",
											"                        pm.sendRequest(getProductParams(), function (err, response) {\r",
											"                            checkResp(response, err, 'Не смогли создать товар');\r",
											"                            pm.globals.set('lastCreatedProductId', response.json().result.id);\r",
											"\r",
											"                            // Области доставки\r",
											"                            pm.sendRequest(getCreateDeliverAreaParams(), function (err, response) {\r",
											"                                checkResp(response, err, 'Не смогли создать районы');\r",
											"\r",
											"                                // Адрес\r",
											"                                pm.sendRequest(getCreateClientAddressParams(), function (err, response) {\r",
											"                                    checkResp(response, err, 'Не смогли создать пользовательский адрес');\r",
											"                                    pm.globals.set('lastAddedClientAddressId', response.json().result.id);\r",
											"\r",
											"                                    // Интервал доставки\r",
											"                                    pm.sendRequest(getCreateDeliveryIntervalParams(), function (err, response) {\r",
											"                                        checkResp(response, err, 'Не смогли создать интервал доставки');\r",
											"                                        pm.globals.set('lastCreatedDIId', response.json().result.id);\r",
											"                                    });\r",
											"                                });\r",
											"                            });\r",
											"                        });\r",
											"                    });\r",
											"                });\r",
											"            });\r",
											"        });\r",
											"    });\r",
											"});\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{clientToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "deliveryIntervalId",
											"value": "{{lastCreatedDIId}}",
											"type": "text"
										},
										{
											"key": "addressId",
											"value": "{{lastAddedClientAddressId}}",
											"type": "text"
										},
										{
											"key": "paymentPrimaryMethod",
											"value": "cash",
											"type": "text"
										},
										{
											"key": "products[0][id]",
											"value": "{{lastCreatedProductId}}",
											"type": "text"
										},
										{
											"key": "products[0][qty]",
											"value": "{{productQty}}",
											"type": "text"
										},
										{
											"key": "products[0][price]",
											"value": "{{productPrice}}",
											"type": "text"
										},
										{
											"key": "products[0][total]",
											"value": "{{productTotal}}",
											"type": "text"
										},
										{
											"key": "productsSum",
											"value": "{{productTotal}}",
											"type": "text"
										},
										{
											"key": "deliverySum",
											"value": "{{orderDeliverySum}}",
											"type": "text"
										},
										{
											"key": "total",
											"value": "{{total}}",
											"type": "text"
										},
										{
											"key": "gifts[0][id]",
											"value": "{{lastCreatedGiftId}}",
											"type": "text"
										},
										{
											"key": "gifts[0][qty]",
											"value": "{{giftQty}}",
											"type": "text"
										},
										{
											"key": "gifts[0][total]",
											"value": "{{giftTotal}}",
											"type": "text"
										},
										{
											"key": "gifts[0][price]",
											"value": "{{giftPrice}}",
											"type": "text"
										},
										{
											"key": "giftBonuses",
											"value": "{{giftBonuses}}",
											"type": "text"
										},
										{
											"key": "clientsComment",
											"value": "Комментарий клиента",
											"type": "text"
										},
										{
											"key": "promoCode",
											"value": "PROMOCODE",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{url}}/api/v1/client/orders",
									"host": [
										"{{url}}"
									],
									"path": [
										"api",
										"v1",
										"client",
										"orders"
									]
								},
								"description": "# Создание заказа, которые оплачивается наличными\n* Параметры\n    * deliveryIntervalId - Ид. интервала доставки\n    * addressId - Ид. адреса доставки\n    * clientsComment - Комментарий клиента\n    * promoCode - Промокод для заказа\n    * products - Массив содержащий список продуктов\n        * id - Ид. продукта\n        * qty - Кол-во продукта\n        * price - Цена за мин. кол-во продукта\n        * total - Полная цена покупки продукта. Логика расчета qty * price\n    * paymentPrimaryMethod - Тип основного способа оплаты. Возможные значения:\n        * cash - Наличные\n        * ccard - Картой курьеру\n        * gpay - Google pay\n        * apay - Apple pay\n        * bonus - Оплата бонусами всего(не используется)\n        * card - Оплата картой online \n    * paymentPrimaryData - Данные оплаты из плат. системы. Используется только для GooglePay и ApplePay\n    * productsSum - Сумма покупки. Считаются только продукты. Доставка не учитывается.\n    * deliverySum - Сумма доставки. Если сумма покупки больше мин. суммы доставки, то указываем 0\n    * total - Итоговая сумма. Сумма продуктов - Сумма скидки + Сумма доставки\n    * giftBonuses - Сколько бонусов потрачено на подарки\n    * gifts - Массив выбранных подарков\n        * id - Ид. подарка\n        * qty - Число выбранных подарков\n        * price - Сколько бонусов спишется за один подарок\n        * total - Сколько бонусов спишется за все выбранные подарки"
							},
							"response": []
						},
						{
							"name": "Create order - PAY TOKEN",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Exists id of order\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.result.id).to.greaterThan(0);\r",
											"    pm.expect(jsonData.success).to.equal(true);\r",
											"    if(jsonData.success) {\r",
											"        pm.globals.set(\"lastCreatedOrderId\", jsonData.result.id);\r",
											"    }\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"//\r",
											"// Вспомогательные ф-ии\r",
											"//\r",
											"function checkResp(resp, err, errMsg) {\r",
											"    if (err) {\r",
											"        console.log('Возникла ошибка HTTP');\r",
											"        throw Error('Ошибка HTTP');\r",
											"    }\r",
											"\r",
											"    let j = resp.json();\r",
											"    if (!j['success']) {\r",
											"        console.log(errMsg);\r",
											"        console.log(j);\r",
											"        throw Error('Ошибка');\r",
											"    }\r",
											"}\r",
											"\r",
											"function getRandomString() {\r",
											"    return Math.random().toString(36).substring(2);\r",
											"}\r",
											"\r",
											"//\r",
											"// Важные переменные, доступы и тд.\r",
											"//\r",
											"let url = pm.environment.get('url');\r",
											"let adminToken = \"Bearer \" + pm.environment.get('adminToken');\r",
											"let clientToken = \"Bearer \" + pm.environment.get('clientToken');\r",
											"\r",
											"//\r",
											"// Инициализация глоб. переменных\r",
											"//\r",
											"pm.globals.set('deliverySum', 1000);\r",
											"pm.globals.set('deliveryFreeSum', 3900);\r",
											"pm.globals.set('unitMin', 100);\r",
											"pm.globals.set('unitStep', 10);\r",
											"pm.globals.set('productPrice', 550);\r",
											"pm.globals.set('productQty', 2);\r",
											"pm.globals.set('productBonuses', '0' );;\r",
											"pm.globals.set('productPromo', '');\r",
											"pm.globals.set('giftPrice', 10);\r",
											"pm.globals.set('giftQty', 1);\r",
											"\r",
											"// Разбираемся с итоговой суммой товаров, подарков и доставки\r",
											"let prodTotal = pm.globals.get('productQty') * pm.globals.get('productPrice');\r",
											"let deliveryFreeSum = pm.globals.get('deliveryFreeSum');\r",
											"let orderDeliverySum = 0\r",
											"if (prodTotal < deliveryFreeSum) {\r",
											"    orderDeliverySum = pm.globals.get('deliverySum');\r",
											"}\r",
											"pm.globals.set('orderDeliverySum', orderDeliverySum)\r",
											"pm.globals.set('productTotal', prodTotal);\r",
											"pm.globals.set('total', prodTotal + orderDeliverySum)\r",
											"\r",
											"let giftTotal = pm.globals.get('giftQty') * pm.globals.get('giftPrice');\r",
											"pm.globals.set('giftTotal', giftTotal);\r",
											"pm.globals.set('giftBonuses', giftTotal);\r",
											"\r",
											"// Получаем информацию о тек. клиенте\r",
											"function getCurrentClientParams() {\r",
											"    return {\r",
											"        method: 'GET',\r",
											"        url: url + '/api/v1/client',\r",
											"        header: {\r",
											"            'Authorization': clientToken,\r",
											"        }\r",
											"    }\r",
											"}\r",
											"\r",
											"// Начисление тек. клиенту бонусных баллов\r",
											"function getUpdateBonusesParams() {\r",
											"    return {\r",
											"        method: 'POST',\r",
											"        url: url + '/api/v1/admin/clients/' + pm.globals.get('currentClientId') + \"/bonuses\",\r",
											"        header: {\r",
											"            'Authorization': adminToken,\r",
											"            'Content-Type': 'multipart/form-data',\r",
											"        },\r",
											"        body: {\r",
											"            mode: 'formdata',\r",
											"            formdata: [\r",
											"                { key: 'bonuses', value: pm.globals.get('giftTotal')  }\r",
											"            ]\r",
											"        }\r",
											"    }\r",
											"}\r",
											"\r",
											"// Создание зоны доставки\r",
											"function getCreateDeliverAreaParams() {\r",
											"    return {\r",
											"        method: 'POST',\r",
											"        url: url + '/api/v1/admin/da',\r",
											"        header: {\r",
											"            'Authorization': adminToken,\r",
											"            'Content-Type': 'multipart/form-data',\r",
											"        },\r",
											"        body: {\r",
											"            mode: 'formdata',\r",
											"            formdata: [\r",
											"                { key: 'names[0]', value: 'Район в МСК ' },\r",
											"                { key: 'colors[0]', value: '#d7d7d7' },\r",
											"                { key: 'polygons[0]', value: '((55.7367046,37.5206105),(55.7127293,37.3819081),(55.639165,37.4533192),(55.7096347,37.5865284),(55.7367046,37.5206105))' },\r",
											"                { key: 'names[1]', value: 'Может в МСК, а может и нет' },\r",
											"                { key: 'colors[1]', value: '#f1f2f3' },\r",
											"                { key: 'polygons[1]', value: '((59.1,38.5206105),(59.7127293,38.3819081),(59.639165,38.4533192),(59.7096347,38.5865284),(59.7367046,38.5206111))' },\r",
											"                { key: 'prices[0]', value: pm.globals.get('deliverySum') },\r",
											"                { key: 'prices[1]', value: '2' },\r",
											"                { key: 'actives[0]', value: 'true' },\r",
											"                { key: 'actives[1]', value: 'true' },\r",
											"                { key: 'deliveryFreeSums[0]', value: pm.globals.get('deliveryFreeSum') },\r",
											"                { key: 'deliveryFreeSums[1]', value: '200' }\r",
											"            ]\r",
											"        }\r",
											"    };\r",
											"};\r",
											"\r",
											"// Параметры для создание адреса клиента\r",
											"function getCreateClientAddressParams() {\r",
											"    return {\r",
											"        method: 'POST',\r",
											"        url: url + '/api/v1/client/addresses',\r",
											"        header: {\r",
											"            'Authorization': clientToken,\r",
											"            'Content-Type': 'multipart/form-data',\r",
											"        },\r",
											"        body: {\r",
											"            mode: 'formdata',\r",
											"            formdata: [\r",
											"                { key: \"name\", value: \"🏰 Мой дом \" + getRandomString() },\r",
											"                { key: \"city\", value: \"Москва\" },\r",
											"                { key: \"street\", value: \"просп. Мичуринский \" + getRandomString() },\r",
											"                { key: \"building\", value: \"4ф\" + getRandomString() },\r",
											"                { key: \"entrance\", value: \"2д\" + getRandomString() },\r",
											"                { key: \"floor\", value: \"45\" },\r",
											"                { key: \"doorphone\", value: \"Нет\" + getRandomString() },\r",
											"                { key: \"appt\", value: \"пятьдест четвертая квартира\" + getRandomString() },\r",
											"                { key: \"lat\", value: \"55.713\" }, ,\r",
											"                { key: \"lon\", value: \"37.52796\" },\r",
											"                { key: \"comment\", value: \"Не звонить! Спят дети.\" + getRandomString() },\r",
											"            ]\r",
											"        }\r",
											"    }\r",
											"};\r",
											"\r",
											"// Параметры для создания группы товаров\r",
											"function getGroupParams() {\r",
											"    return {\r",
											"        method: 'POST',\r",
											"        url: url + '/api/v1/admin/groups',\r",
											"        header: {\r",
											"            'Authorization': adminToken,\r",
											"            'Content-Type': 'multipart/form-data',\r",
											"        },\r",
											"        body: {\r",
											"            mode: 'formdata',\r",
											"            formdata: [\r",
											"                { key: \"active\", value: \"true\" },\r",
											"                { key: \"name\", value: \"Бананs \" + getRandomString() },\r",
											"                { key: \"order\", value: \"1\" },\r",
											"                { key: \"bgColor\", value: \"#D3D3D3\" },\r",
											"                // Картинки не отправляются { key: \"image\", value: \"asd\"},\r",
											"            ]\r",
											"        }\r",
											"    }\r",
											"}\r",
											"\r",
											"// Параметры для создания продукта\r",
											"function getProductParams() {\r",
											"    return {\r",
											"        method: 'POST',\r",
											"        url: url + '/api/v1/admin/products',\r",
											"        header: {\r",
											"            'Authorization': adminToken,\r",
											"            'Content-Type': 'multipart/form-data',\r",
											"        },\r",
											"        body: {\r",
											"            mode: 'formdata',\r",
											"            formdata: [\r",
											"                { key: \"active\", value: \"true\" },\r",
											"                { key: \"name\", value: \"Бананан \" + getRandomString() },\r",
											"                { key: \"description\", value: \"Большой и красивый\" },\r",
											"                // { key: \"image\", value: fileInput.files[0], value: \"/C:/Users/Иван/Pictures/2019-01-28_182632.png\"},\r",
											"                { key: \"unitId\", value: pm.globals.get('lastCreatedUnitId') },\r",
											"                { key: \"unitMin\", value: pm.globals.get('unitMin') },\r",
											"                { key: \"price\", value: pm.globals.get('productPrice') },\r",
											"                { key: \"bonusesPercentage\", value: pm.globals.get('productBonuses') },\r",
											"                { key: \"groupId\", value: pm.globals.get('lastCreatedGroupId') },\r",
											"                { key: \"tags[]\", value: pm.globals.get('lastCreatedTagId') },\r",
											"                { key: \"promotion\", value: pm.globals.get('productPromo') },\r",
											"                { key: \"order\", value: \"1\" },\r",
											"                { key: \"composition\", value: \"Эктоплазма\" },\r",
											"                { key: \"shelfLife\", value: \"Хранить в банках.\" },\r",
											"                { key: \"nutrition\", value: \"Молекул\" },\r",
											"            ]\r",
											"        }\r",
											"    }\r",
											"};\r",
											"\r",
											"// Параметры для создание ед. измерения\r",
											"function getCreateUnitParams() {\r",
											"    return {\r",
											"        method: 'POST',\r",
											"        url: url + '/api/v1/admin/units',\r",
											"        header: {\r",
											"            'Authorization': adminToken,\r",
											"            'Content-Type': 'multipart/form-data',\r",
											"        },\r",
											"        body: {\r",
											"            mode: 'formdata',\r",
											"            formdata: [\r",
											"                { key: \"fullName\", value: \"Единица\" + getRandomString() },\r",
											"                { key: \"shortName\", value: \"Ед\" + getRandomString() },\r",
											"                { key: \"min\", value: pm.globals.get('unitMin') },\r",
											"                { key: \"step\", value: pm.globals.get('unitStep') }\r",
											"            ]\r",
											"        }\r",
											"    }\r",
											"};\r",
											"\r",
											"// Параметры для создания тега\r",
											"function getCreateTagParams() {\r",
											"    return {\r",
											"        method: 'POST',\r",
											"        url: url + '/api/v1/admin/tags',\r",
											"        header: {\r",
											"            'Authorization': adminToken,\r",
											"            'Content-Type': 'multipart/form-data',\r",
											"        },\r",
											"        body: {\r",
											"            mode: 'formdata',\r",
											"            formdata: [\r",
											"                { key: \"name\", value: \"Тег\" + getRandomString() },\r",
											"                { key: \"order\", value: 1 },\r",
											"                { key: \"active\", value: 'true' }\r",
											"            ]\r",
											"        }\r",
											"    }\r",
											"};\r",
											"\r",
											"// Параметры для создания подарка\r",
											"function getCreateGiftParams() {\r",
											"    return {\r",
											"        method: 'POST',\r",
											"        url: url + '/api/v1/admin/gifts',\r",
											"        header: {\r",
											"            'Authorization': adminToken,\r",
											"            'Content-Type': 'multipart/form-data',\r",
											"        },\r",
											"        body: {\r",
											"            mode: 'formdata',\r",
											"            formdata: [\r",
											"                { key: \"name\", value: \"Подарок\" + getRandomString() },\r",
											"                { key: \"order\", value: \"100\" },\r",
											"                { key: \"active\", value: \"true\" },\r",
											"                { key: \"description\", value: \"Игрушка в форме слоника\" + getRandomString() },\r",
											"                { key: \"composition\", value: \"Китайский пот и слезы\" },\r",
											"                { key: \"shelfLife\", value: \"Хранить в святом месте\" },\r",
											"                { key: \"price\", value: pm.globals.get('giftPrice') },\r",
											"            ]\r",
											"        }\r",
											"    }\r",
											"}\r",
											"\r",
											"// Параметры для создания интервала доставки\r",
											"function getCreateDeliveryIntervalParams() {\r",
											"    return {\r",
											"        method: 'POST',\r",
											"        url: url + '/api/v1/admin/di',\r",
											"        header: {\r",
											"            'Authorization': adminToken,\r",
											"            'Content-Type': 'multipart/form-data',\r",
											"        },\r",
											"        body: {\r",
											"            mode: 'formdata',\r",
											"            formdata: [\r",
											"                { key: \"dayOfWeek\", value: \"6\" },\r",
											"                { key: \"startHour\", value: \"1\" },\r",
											"                { key: \"startMinute\", value: \"0\" },\r",
											"                { key: \"endHour\", value: \"2\" },\r",
											"                { key: \"endMinute\", value: \"1\" },\r",
											"                { key: \"active\", value: \"true\" },\r",
											"            ]\r",
											"        }\r",
											"    }\r",
											"}\r",
											"\r",
											"//\r",
											"// Создание всех необходимых сущностей для дальнейшего создания заказа в Request\r",
											"//\r",
											"\r",
											"// Получаем ид. текущего клиента\r",
											"pm.sendRequest(getCurrentClientParams(), function(err, response) {\r",
											"    checkResp(response, err, 'Не удалось получить информацию о тек. клиенте');\r",
											"    pm.globals.set('currentClientId', response.json().result.id);\r",
											"\r",
											"    // Добавляем тек. киенту бонусов\r",
											"    pm.sendRequest(getUpdateBonusesParams(), function(err, response) {\r",
											"        // Группа товаров\r",
											"        pm.sendRequest(getGroupParams(), function (err, response) {\r",
											"            checkResp(response, err, 'Не удалось создать группу');\r",
											"            pm.globals.set('lastCreatedGroupId', response.json().result.id);\r",
											"\r",
											"            // Ед. измерения\r",
											"            pm.sendRequest(getCreateUnitParams(), function (err, response) {\r",
											"                checkResp(response, err, 'Не смогли создать ед. измерения');\r",
											"                pm.globals.set('lastCreatedUnitId', response.json().result.id);\r",
											"\r",
											"                // Тег\r",
											"                pm.sendRequest(getCreateTagParams(), function (err, response) {\r",
											"                    checkResp(response, err, 'Не смогли создать тег');\r",
											"                    pm.globals.set('lastCreatedTagId', response.json().result.id);\r",
											"\r",
											"                    // Подарок\r",
											"                    pm.sendRequest(getCreateGiftParams(), function (err, response) {\r",
											"                        checkResp(response, err, 'Не смогли создать подарок');\r",
											"                        pm.globals.set('lastCreatedGiftId', response.json().result.id);\r",
											"\r",
											"                        // Товар\r",
											"                        pm.sendRequest(getProductParams(), function (err, response) {\r",
											"                            checkResp(response, err, 'Не смогли создать товар');\r",
											"                            pm.globals.set('lastCreatedProductId', response.json().result.id);\r",
											"\r",
											"                            // Области доставки\r",
											"                            pm.sendRequest(getCreateDeliverAreaParams(), function (err, response) {\r",
											"                                checkResp(response, err, 'Не смогли создать районы');\r",
											"\r",
											"                                // Адрес\r",
											"                                pm.sendRequest(getCreateClientAddressParams(), function (err, response) {\r",
											"                                    checkResp(response, err, 'Не смогли создать пользовательский адрес');\r",
											"                                    pm.globals.set('lastAddedClientAddressId', response.json().result.id);\r",
											"\r",
											"                                    // Интервал доставки\r",
											"                                    pm.sendRequest(getCreateDeliveryIntervalParams(), function (err, response) {\r",
											"                                        checkResp(response, err, 'Не смогли создать интервал доставки');\r",
											"                                        pm.globals.set('lastCreatedDIId', response.json().result.id);\r",
											"                                    });\r",
											"                                });\r",
											"                            });\r",
											"                        });\r",
											"                    });\r",
											"                });\r",
											"            });\r",
											"        });\r",
											"    });\r",
											"});\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "deliveryIntervalId",
											"value": "{{lastCreatedDIId}}",
											"type": "text"
										},
										{
											"key": "addressId",
											"value": "{{lastAddedClientAddressId}}",
											"type": "text"
										},
										{
											"key": "paymentPrimaryMethod",
											"value": "card",
											"type": "text"
										},
										{
											"key": "products[0][id]",
											"value": "{{lastCreatedProductId}}",
											"type": "text"
										},
										{
											"key": "products[0][qty]",
											"value": "{{productQty}}",
											"type": "text"
										},
										{
											"key": "products[0][price]",
											"value": "{{productPrice}}",
											"type": "text"
										},
										{
											"key": "products[0][total]",
											"value": "{{productTotal}}",
											"type": "text"
										},
										{
											"key": "productsSum",
											"value": "{{productTotal}}",
											"type": "text"
										},
										{
											"key": "deliverySum",
											"value": "{{orderDeliverySum}}",
											"type": "text"
										},
										{
											"key": "total",
											"value": "{{total}}",
											"type": "text"
										},
										{
											"key": "gifts[0][id]",
											"value": "{{lastCreatedGiftId}}",
											"type": "text"
										},
										{
											"key": "gifts[0][qty]",
											"value": "{{giftQty}}",
											"type": "text"
										},
										{
											"key": "gifts[0][total]",
											"value": "{{giftTotal}}",
											"type": "text"
										},
										{
											"key": "gifts[0][price]",
											"value": "{{giftPrice}}",
											"type": "text"
										},
										{
											"key": "giftBonuses",
											"value": "{{giftBonuses}}",
											"type": "text"
										},
										{
											"key": "clientsComment",
											"value": "Комментарий клиента",
											"type": "text"
										},
										{
											"key": "promoCode",
											"value": "PROMOCODE",
											"type": "text"
										},
										{
											"key": "paymentToken",
											"value": "pt-27b49bb8-0000-50cf-9000-062ddc2ec25c",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{url}}/api/v1/client/orders",
									"host": [
										"{{url}}"
									],
									"path": [
										"api",
										"v1",
										"client",
										"orders"
									]
								},
								"description": "# Создание заказа, которые оплачивается наличными\n* Параметры\n    * deliveryIntervalId - Ид. интервала доставки\n    * addressId - Ид. адреса доставки\n    * clientsComment - Комментарий клиента\n    * promoCode - Промокод для заказа\n    * products - Массив содержащий список продуктов\n        * id - Ид. продукта\n        * qty - Кол-во продукта\n        * price - Цена за мин. кол-во продукта\n        * total - Полная цена покупки продукта. Логика расчета qty * price\n    * paymentPrimaryMethod - Тип основного способа оплаты. Возможные значения:\n        * cash - Наличные\n        * ccard - Картой курьеру\n        * gpay - Google pay\n        * apay - Apple pay\n        * bonus - Оплата бонусами всего(не используется)\n        * card - Оплата картой online \n    * paymentPrimaryData - Данные оплаты из плат. системы. Используется только для GooglePay и ApplePay\n    * productsSum - Сумма покупки. Считаются только продукты. Доставка не учитывается.\n    * deliverySum - Сумма доставки. Если сумма покупки больше мин. суммы доставки, то указываем 0\n    * total - Итоговая сумма. Сумма продуктов - Сумма скидки + Сумма доставки\n    * giftBonuses - Сколько бонусов потрачено на подарки\n    * gifts - Массив выбранных подарков\n        * id - Ид. подарка\n        * qty - Число выбранных подарков\n        * price - Сколько бонусов спишется за один подарок\n        * total - Сколько бонусов спишется за все выбранные подарки"
							},
							"response": []
						},
						{
							"name": "My orders",
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{url}}/api/v1/client/orders?perPage=3",
									"host": [
										"{{url}}"
									],
									"path": [
										"api",
										"v1",
										"client",
										"orders"
									],
									"query": [
										{
											"key": "perPage",
											"value": "3"
										}
									]
								},
								"description": "# Выводим список заказов клиента\r\n* Описание - Список заказов отсортирован в обратном порядке. В заказ доавблены основные поля сущности оплаты, подарки, элементы заказа\r\n* Параметры\r\n    * page\r\n    * perPage"
							},
							"response": []
						}
					],
					"auth": {
						"type": "bearer",
						"bearer": [
							{
								"key": "token",
								"value": "{{clientToken}}",
								"type": "string"
							}
						]
					},
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					]
				},
				{
					"name": "Client settings",
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{url}}/api/v1/settings",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"v1",
								"settings"
							]
						},
						"description": "# Получить все настройки приложения\r\n* Описание\r\n    * Возвращаем все системные настройки, данные, необходимые для формирования страницы, а также группы товаров, теги, области доставки и интервалы доставки"
					},
					"response": []
				}
			]
		},
		{
			"name": "💰YooKassa",
			"item": [
				{
					"name": "Captuer notification",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"type\" : \"notification\", \r\n    \"event\" : \"payment.waiting_for_capture\",\r\n    \"object\" : {\r\n        \"id\" : \"27b7154b-000f-5000-8000-1f8db6e1c8f1\", \r\n        \"status\" : \"waiting_for_capture\",\r\n        \"paid\" : true,\r\n        \"amount\" : {\r\n            \"value\" : \"1135.00\",\r\n            \"currency\" : \"RUB\"\r\n        },\r\n        \"authorization_details\" : {\r\n            \"rrn\" : \"613918638624\",     \r\n            \"auth_code\" : \"634620\"    \r\n        },\r\n        \"created_at\" : \"2021-02-11T10:06:03.323Z\",   \r\n        \"description\" : \"Оплата заказа №125\",    \r\n        \"expires_at\" : \"2021-02-18T10:06:18.863Z\",   \r\n        \"metadata\" : {\r\n            \"orderId\" : \"125\"\r\n        }, \r\n        \"payment_method\" : {      \"type\" : \"bank_card\",      \"id\" : \"27b7154b-000f-5000-8000-1f8db6e1c8f1\",      \"saved\" : false,      \"card\" : {        \"first6\" : \"555555\",        \"last4\" : \"4477\",        \"expiry_month\" : \"11\",        \"expiry_year\" : \"2021\",        \"card_type\" : \"MasterCard\",        \"issuer_country\" : \"US\"      },      \"title\" : \"Bank card *4477\"    },    \"recipient\" : {      \"account_id\" : \"781011\",      \"gateway_id\" : \"1819995\"    },    \"refundable\" : false,    \"test\" : true  }}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/api/v1/billing/payment-listener",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"v1",
								"billing",
								"payment-listener"
							]
						},
						"description": "# Уведомление ЯКассы о блокировке суммы на счете клиента\n* В .env файле прописать _PAYMENT_GATEWAY_SECURE_TOKEN=123\n* В блоке metadata прописать значение token = 123\n* В блоке metadata прописать orderId\n* Убедиться, что БД есть оплата с полем extId = object.id запроса\n* Заказ в статусе new"
					},
					"response": []
				},
				{
					"name": "Success notification",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{ \r\n  \"type\": \"notification\",\r\n  \"event\": \"payment.succeeded\",\r\n  \"created_at\": \"2018-07-10T14:27:54.691Z\",\r\n  \"object\": {\r\n    \"id\": \"27b5c9df-000f-5000-a000-1adcacbb4bd3\",\r\n    \"status\": \"succeeded\",\r\n    \"paid\": true,\r\n    \"amount\": {\r\n      \"value\": \"2200.00\",\r\n      \"currency\": \"RUB\"\r\n    },\r\n    \"authorization_details\": {\r\n      \"rrn\": \"10000000000\",\r\n      \"auth_code\": \"000000\"\r\n    },\r\n    \"created_at\": \"2018-07-10T14:27:54.691Z\",\r\n    \"description\": \"Заказ №72\",\r\n    \"expires_at\": \"2018-07-17T14:28:32.484Z\",\r\n    \"captured_at\": \"2018-07-17T14:28:32.484Z\",\r\n    \"metadata\": {\r\n        \"orderId\": \"49\",\r\n        \"token\": \"123\"\r\n    },\r\n    \"payment_method\": {\r\n      \"type\": \"bank_card\",\r\n      \"id\": \"22d6d597-000f-5000-9000-145f6df21d6f\",\r\n      \"saved\": false,\r\n      \"card\": {\r\n        \"first6\": \"555555\",\r\n        \"last4\": \"4444\",\r\n        \"expiry_month\": \"07\",\r\n        \"expiry_year\": \"2021\",\r\n        \"card_type\": \"MasterCard\",\r\n      \"issuer_country\": \"RU\",\r\n      \"issuer_name\": \"Sberbank\"\r\n      },\r\n      \"title\": \"Bank card *4444\"\r\n    },\r\n    \"refundable\": false,\r\n    \"test\": false\r\n  }\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/api/v1/billing/payment-listener",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"v1",
								"billing",
								"payment-listener"
							]
						},
						"description": "# Успешная оплата заказа\r\n* Что бы проверить оплату нужно сначала создать заказ при помощи _Create order - FULL TEST_\r\n* В .env файле прописать _YANDEX_KASSA_SECURE_TOKEN=123_ Затем в теле запроса, в блоке metadata прописать значение _123_, как _YANDEX_KASSA_SECURE_TOKEN_"
					},
					"response": []
				},
				{
					"name": "Cancel notification",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{ \r\n  \"type\": \"notification\",\r\n  \"event\": \"payment.canceled\",\r\n  \"created_at\": \"2018-07-10T14:27:54.691Z\",\r\n  \"object\": {\r\n    \"id\": \"27b6159c-000f-5000-a000-1df847055023\",\r\n    \"status\": \"succeeded\",\r\n    \"paid\": true,\r\n    \"amount\": {\r\n      \"value\": \"2.00\",\r\n      \"currency\": \"RUB\"\r\n    },\r\n    \"authorization_details\": {\r\n      \"rrn\": \"10000000000\",\r\n      \"auth_code\": \"000000\"\r\n    },\r\n    \"created_at\": \"2018-07-10T14:27:54.691Z\",\r\n    \"description\": \"Заказ №72\",\r\n    \"expires_at\": \"2018-07-17T14:28:32.484Z\",\r\n    \"captured_at\": \"2018-07-17T14:28:32.484Z\",\r\n    \"metadata\": {\r\n        \"orderId\": \"1\",\r\n        \"token\": \"123\"\r\n    },\r\n    \"payment_method\": {\r\n      \"type\": \"bank_card\",\r\n      \"id\": \"22d6d597-000f-5000-9000-145f6df21d6f\",\r\n      \"saved\": false,\r\n      \"card\": {\r\n        \"first6\": \"555555\",\r\n        \"last4\": \"4444\",\r\n        \"expiry_month\": \"07\",\r\n        \"expiry_year\": \"2021\",\r\n        \"card_type\": \"MasterCard\",\r\n      \"issuer_country\": \"RU\",\r\n      \"issuer_name\": \"Sberbank\"\r\n      },\r\n      \"title\": \"Bank card *4444\"\r\n    },\r\n    \"refundable\": false,\r\n    \"test\": false\r\n  }\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/api/v1/billing/payment-listener",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"v1",
								"billing",
								"payment-listener"
							]
						},
						"description": "# Уведомление о отмене оплаты\n"
					},
					"response": []
				},
				{
					"name": "Refund notification",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{ \r\n  \"type\": \"notification\",\r\n  \"event\": \"refund.succeeded\",\r\n  \"created_at\": \"2018-07-10T14:27:54.691Z\",\r\n  \"object\": {\r\n    \"id\": \"27b62447-0015-5000-a000-1a1fbc8d17eb\",\r\n    \"payment_id\": \"27b62447-0015-5000-a000-1a1fbc8d17eb\",\r\n    \"status\": \"succeeded\",\r\n    \"amount\": {\r\n      \"value\": \"2.00\",\r\n      \"currency\": \"RUB\"\r\n    },\r\n    \"authorization_details\": {\r\n      \"rrn\": \"10000000000\",\r\n      \"auth_code\": \"000000\"\r\n    },\r\n    \"created_at\": \"2018-07-10T14:27:54.691Z\",\r\n    \"description\": \"Заказ №72\",\r\n    \"expires_at\": \"2018-07-17T14:28:32.484Z\",\r\n    \"captured_at\": \"2018-07-17T14:28:32.484Z\",\r\n    \"payment_method\": {\r\n      \"type\": \"bank_card\",\r\n      \"id\": \"22d6d597-000f-5000-9000-145f6df21d6f\",\r\n      \"saved\": false,\r\n      \"card\": {\r\n        \"first6\": \"555555\",\r\n        \"last4\": \"4444\",\r\n        \"expiry_month\": \"07\",\r\n        \"expiry_year\": \"2021\",\r\n        \"card_type\": \"MasterCard\",\r\n      \"issuer_country\": \"RU\",\r\n      \"issuer_name\": \"Sberbank\"\r\n      },\r\n      \"title\": \"Bank card *4444\"\r\n    },\r\n    \"refundable\": false,\r\n    \"test\": false\r\n  }\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/api/v1/billing/payment-listener",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"v1",
								"billing",
								"payment-listener"
							]
						},
						"description": "# Уведомление о отмене оплаты\n"
					},
					"response": []
				},
				{
					"name": "Payment by token",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"function getRandomString() {\r",
									"    return Math.random().toString(36).substring(2);\r",
									"}\r",
									"pm.globals.set('randomKey', getRandomString());"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{yookassaSecretKey}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{yookassaShopId}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Idempotence-Key",
								"value": "{{randomKey}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"payment_token\": \"pt-27b623ca-0000-50cf-9000-09df6fa2581b\",\r\n    \"amount\": {\r\n        \"value\": \"2100.0\",\r\n        \"currency\": \"RUB\"\r\n    },\r\n    \"confirmation\": {\r\n        \"type\": \"redirect\",\r\n        \"enforce\": false,\r\n        \"return_url\": \"https://www.merchant-website.com/return_url\"\r\n    },\r\n    \"capture\": false,\r\n    \"description\": \"Заказ №72\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://api.yookassa.ru/v3/payments",
							"protocol": "https",
							"host": [
								"api",
								"yookassa",
								"ru"
							],
							"path": [
								"v3",
								"payments"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Store",
			"item": [
				{
					"name": "Stores",
					"item": [
						{
							"name": "Index",
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{adminToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{url}}/api/v1/stores",
									"host": [
										"{{url}}"
									],
									"path": [
										"api",
										"v1",
										"stores"
									],
									"query": [
										{
											"key": "type",
											"value": "product",
											"disabled": true
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Show",
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{adminToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{url}}/api/v1/stores/1",
									"host": [
										"{{url}}"
									],
									"path": [
										"api",
										"v1",
										"stores",
										"1"
									]
								}
							},
							"response": []
						},
						{
							"name": "Contents",
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{adminToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{url}}/api/v1/stores/2/contents",
									"host": [
										"{{url}}"
									],
									"path": [
										"api",
										"v1",
										"stores",
										"2",
										"contents"
									],
									"query": [
										{
											"key": "perPage",
											"value": "25",
											"disabled": true
										},
										{
											"key": "page",
											"value": "1",
											"disabled": true
										},
										{
											"key": "productId",
											"value": "1",
											"disabled": true
										},
										{
											"key": "orderId",
											"value": "1",
											"disabled": true
										},
										{
											"key": "createdAtBegin",
											"value": "01.06.2021",
											"disabled": true
										},
										{
											"key": "createdAtEnd",
											"value": "02.06.2021",
											"disabled": true
										},
										{
											"key": "updatedAtBegin",
											"value": "01.06.2021",
											"disabled": true
										},
										{
											"key": "updatedAtEnd",
											"value": "02.06.2021",
											"disabled": true
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Store",
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{adminToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "name",
											"value": "Store product",
											"type": "text"
										},
										{
											"key": "type",
											"value": "product",
											"type": "text"
										},
										{
											"key": "order",
											"value": "1",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{url}}/api/v1/stores",
									"host": [
										"{{url}}"
									],
									"path": [
										"api",
										"v1",
										"stores"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update",
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{adminToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "name",
											"value": "new",
											"type": "text"
										},
										{
											"key": "order",
											"value": "2",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{url}}/api/v1/stores/1",
									"host": [
										"{{url}}"
									],
									"path": [
										"api",
										"v1",
										"stores",
										"1"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete",
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{adminToken}}",
											"type": "string"
										}
									]
								},
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{url}}/api/v1/stores/1",
									"host": [
										"{{url}}"
									],
									"path": [
										"api",
										"v1",
										"stores",
										"1"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Store places",
					"item": [
						{
							"name": "Index",
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{adminToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{url}}/api/v1/store-places",
									"host": [
										"{{url}}"
									],
									"path": [
										"api",
										"v1",
										"store-places"
									]
								}
							},
							"response": []
						},
						{
							"name": "Show",
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{adminToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{url}}/api/v1/store-places/1",
									"host": [
										"{{url}}"
									],
									"path": [
										"api",
										"v1",
										"store-places",
										"1"
									]
								}
							},
							"response": []
						},
						{
							"name": "Store",
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{adminToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "storeId",
											"value": "1",
											"type": "text"
										},
										{
											"key": "name",
											"value": "palce",
											"type": "text"
										},
										{
											"key": "order",
											"value": "1",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{url}}/api/v1/store-places",
									"host": [
										"{{url}}"
									],
									"path": [
										"api",
										"v1",
										"store-places"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update",
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{adminToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "storeId",
											"value": "2",
											"type": "text"
										},
										{
											"key": "name",
											"value": "store palce 1",
											"type": "text"
										},
										{
											"key": "order",
											"value": "2",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{url}}/api/v1/store-places/2",
									"host": [
										"{{url}}"
									],
									"path": [
										"api",
										"v1",
										"store-places",
										"2"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete",
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{adminToken}}",
											"type": "string"
										}
									]
								},
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{url}}/api/v1/store-places/1",
									"host": [
										"{{url}}"
									],
									"path": [
										"api",
										"v1",
										"store-places",
										"1"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Store operations",
					"item": [
						{
							"name": "index",
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{adminToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{url}}/api/v1/store-operations?storeId=2&sort=createdAt&sortDirect=desc",
									"host": [
										"{{url}}"
									],
									"path": [
										"api",
										"v1",
										"store-operations"
									],
									"query": [
										{
											"key": "storeId",
											"value": "2"
										},
										{
											"key": "perPage",
											"value": "25",
											"disabled": true
										},
										{
											"key": "page",
											"value": "1",
											"disabled": true
										},
										{
											"key": "adminId",
											"value": "1",
											"disabled": true
										},
										{
											"key": "clientId",
											"value": "1",
											"disabled": true
										},
										{
											"key": "type",
											"value": "ordering",
											"disabled": true
										},
										{
											"key": "orderId",
											"value": "1",
											"disabled": true
										},
										{
											"key": "createdAtBegin",
											"value": "01.06.2021",
											"disabled": true
										},
										{
											"key": "createdAtEnd",
											"value": "02.06.2021",
											"disabled": true
										},
										{
											"key": "updatedAtBegin",
											"value": "01.06.2021",
											"disabled": true
										},
										{
											"key": "updatedAtEnd",
											"value": "02.06.2021",
											"disabled": true
										},
										{
											"key": "sort",
											"value": "createdAt"
										},
										{
											"key": "sortDirect",
											"value": "desc"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Show",
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{adminToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{url}}/api/v1/store-operations/1",
									"host": [
										"{{url}}"
									],
									"path": [
										"api",
										"v1",
										"store-operations",
										"1"
									]
								}
							},
							"response": []
						},
						{
							"name": "Product Operations",
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{adminToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{url}}/api/v1/store-operations/product/1",
									"host": [
										"{{url}}"
									],
									"path": [
										"api",
										"v1",
										"store-operations",
										"product",
										"1"
									]
								}
							},
							"response": []
						},
						{
							"name": "Product Residue",
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{adminToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{url}}/api/v1/store-operations/product-residue/1",
									"host": [
										"{{url}}"
									],
									"path": [
										"api",
										"v1",
										"store-operations",
										"product-residue",
										"1"
									]
								}
							},
							"response": []
						},
						{
							"name": "Product Shortage",
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{adminToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{url}}/api/v1/store-operations/purchaser-shortage?date=07.08.2021&orderStatus=placed",
									"host": [
										"{{url}}"
									],
									"path": [
										"api",
										"v1",
										"store-operations",
										"purchaser-shortage"
									],
									"query": [
										{
											"key": "date",
											"value": "07.08.2021"
										},
										{
											"key": "startHour",
											"value": "1",
											"disabled": true
										},
										{
											"key": "endHour",
											"value": "11",
											"disabled": true
										},
										{
											"key": "orderStatus",
											"value": "placed"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Put",
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{adminToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "storeId",
											"value": "1",
											"type": "text"
										},
										{
											"key": "contents[0][productId]",
											"value": "1",
											"type": "text"
										},
										{
											"key": "contents[0][realUnits]",
											"value": "1",
											"type": "text"
										},
										{
											"key": "contents[0][storePlaceId]",
											"value": "2",
											"type": "text"
										},
										{
											"key": "contents[0][netCost]",
											"value": "23",
											"type": "text"
										},
										{
											"key": "files[1][name]",
											"value": "file name 1",
											"type": "text",
											"disabled": true
										},
										{
											"key": "files[1][src]",
											"type": "file",
											"src": [],
											"disabled": true
										}
									]
								},
								"url": {
									"raw": "{{url}}/api/v1/store-operation/put",
									"host": [
										"{{url}}"
									],
									"path": [
										"api",
										"v1",
										"store-operation",
										"put"
									]
								}
							},
							"response": []
						},
						{
							"name": "Take",
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{adminToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "storeId",
											"value": "1",
											"type": "text"
										},
										{
											"key": "force",
											"value": "false",
											"type": "text"
										},
										{
											"key": "contents[1][productId]",
											"value": "1",
											"type": "text"
										},
										{
											"key": "contents[1][realUnits]",
											"value": "10",
											"type": "text"
										},
										{
											"key": "contents[1][storePlaceId]",
											"value": "2",
											"type": "text"
										},
										{
											"key": "files[1][name]",
											"value": "file name 1",
											"type": "text",
											"disabled": true
										},
										{
											"key": "files[1][src]",
											"type": "file",
											"src": "/C:/Users/Vadim/Desktop/Без названия.jpg",
											"disabled": true
										}
									]
								},
								"url": {
									"raw": "{{url}}/api/v1/store-operation/take",
									"host": [
										"{{url}}"
									],
									"path": [
										"api",
										"v1",
										"store-operation",
										"take"
									]
								}
							},
							"response": []
						},
						{
							"name": "Correction",
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{adminToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "storeId",
											"value": "1",
											"type": "text"
										},
										{
											"key": "contents[1][productId]",
											"value": "1",
											"type": "text"
										},
										{
											"key": "contents[1][realUnits]",
											"value": "2",
											"type": "text"
										},
										{
											"key": "contents[1][storePlaceId]",
											"value": "2",
											"type": "text"
										},
										{
											"key": "contents[1][netCost]",
											"value": "123",
											"type": "text"
										},
										{
											"key": "files[1][name]",
											"value": "file name 1",
											"type": "text",
											"disabled": true
										},
										{
											"key": "files[1][src]",
											"type": "file",
											"src": "/C:/Users/Vadim/Desktop/Без названия.jpg",
											"disabled": true
										}
									]
								},
								"url": {
									"raw": "{{url}}/api/v1/store-operation/correction",
									"host": [
										"{{url}}"
									],
									"path": [
										"api",
										"v1",
										"store-operation",
										"correction"
									]
								}
							},
							"response": []
						},
						{
							"name": "Clear System Place",
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{adminToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "storeId",
											"value": "1",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{url}}/api/v1/store-operation/clear-system-place",
									"host": [
										"{{url}}"
									],
									"path": [
										"api",
										"v1",
										"store-operation",
										"clear-system-place"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Store operations Gift",
					"item": [
						{
							"name": "Gift Residue",
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{adminToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{url}}/api/v1/store-gift-operations/gift-residue/1",
									"host": [
										"{{url}}"
									],
									"path": [
										"api",
										"v1",
										"store-gift-operations",
										"gift-residue",
										"1"
									]
								}
							},
							"response": []
						},
						{
							"name": "Put",
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{adminToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "storeId",
											"value": "2",
											"type": "text"
										},
										{
											"key": "contents[0][giftId]",
											"value": "1",
											"type": "text"
										},
										{
											"key": "contents[0][realUnits]",
											"value": "1",
											"type": "text"
										},
										{
											"key": "contents[0][storePlaceId]",
											"value": "4",
											"type": "text"
										},
										{
											"key": "files[1][name]",
											"value": "file name 1",
											"type": "text",
											"disabled": true
										},
										{
											"key": "files[1][src]",
											"type": "file",
											"src": [],
											"disabled": true
										}
									]
								},
								"url": {
									"raw": "{{url}}/api/v1/store-gift-operation/put",
									"host": [
										"{{url}}"
									],
									"path": [
										"api",
										"v1",
										"store-gift-operation",
										"put"
									]
								}
							},
							"response": []
						},
						{
							"name": "Take",
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{adminToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "storeId",
											"value": "2",
											"type": "text"
										},
										{
											"key": "force",
											"value": "false",
											"type": "text"
										},
										{
											"key": "contents[1][giftId]",
											"value": "1",
											"type": "text"
										},
										{
											"key": "contents[1][realUnits]",
											"value": "10",
											"type": "text"
										},
										{
											"key": "contents[1][storePlaceId]",
											"value": "4",
											"type": "text"
										},
										{
											"key": "files[1][name]",
											"value": "file name 1",
											"type": "text",
											"disabled": true
										},
										{
											"key": "files[1][src]",
											"type": "file",
											"src": "/C:/Users/Vadim/Desktop/Без названия.jpg",
											"disabled": true
										}
									]
								},
								"url": {
									"raw": "{{url}}/api/v1/store-gift-operation/take",
									"host": [
										"{{url}}"
									],
									"path": [
										"api",
										"v1",
										"store-gift-operation",
										"take"
									]
								}
							},
							"response": []
						},
						{
							"name": "Correction",
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{adminToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "storeId",
											"value": "2",
											"type": "text"
										},
										{
											"key": "contents[1][giftId]",
											"value": "1",
											"type": "text"
										},
										{
											"key": "contents[1][realUnits]",
											"value": "2",
											"type": "text"
										},
										{
											"key": "contents[1][storePlaceId]",
											"value": "4",
											"type": "text"
										},
										{
											"key": "files[1][name]",
											"value": "file name 1",
											"type": "text",
											"disabled": true
										},
										{
											"key": "files[1][src]",
											"type": "file",
											"src": "/C:/Users/Vadim/Desktop/Без названия.jpg",
											"disabled": true
										}
									]
								},
								"url": {
									"raw": "{{url}}/api/v1/store-gift-operation/correction",
									"host": [
										"{{url}}"
									],
									"path": [
										"api",
										"v1",
										"store-gift-operation",
										"correction"
									]
								}
							},
							"response": []
						},
						{
							"name": "Clear System Place",
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{adminToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "storeId",
											"value": "2",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{url}}/api/v1/store-gift-operation/clear-system-place",
									"host": [
										"{{url}}"
									],
									"path": [
										"api",
										"v1",
										"store-gift-operation",
										"clear-system-place"
									]
								}
							},
							"response": []
						}
					]
				}
			]
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					"pm.test(\"Status code is 200\", function () {",
					"    pm.response.to.have.status(200);",
					"});"
				]
			}
		}
	]
}